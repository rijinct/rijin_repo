
import unittest

import sqlparse
import sys
sys.path.extend(['tools/', 'framework'])
from tools.query_parser import QueryParser # noqa E402


class TestQueryParser(unittest.TestCase):
    def remove_quotes(self, query):
        return query.replace("''", "'").replace("decode(",
                                                "custom_decode(")

    def parsed_query(self, query):
        return sqlparse.parse(query)[0]

    INPUT_QUERY_1 = """insert overwrite table PS_BB_DNS_ALL_1_HOUR 
    partition(dt=''111'', tz=''Default'')
select /*+ STREAMTABLE(#TIMESTAMP_HINT) */
nvl(us_bb_dns_1.DNS_SERVER_IP,''NULL IN SOURCE'') AS dns_server_ip, 
(case when us_bb_dns_1.DNS_SERVER_TYPE = 1 then ''Remote''  when 
us_bb_dns_1.DNS_SERVER_TYPE = 2 then ''Local'' else nvl(
es_dns.dns_server_type,''Unknown'') end),nvl(es_dns.MONITORED_DNS_FLAG,
0) AS MONITORED_DNS_FLAG,nvl(es_equip.TECHNOLOGY,''Unknown'') AS 
technology,nvl(es_equip.SUB_TECHNOLOGY_ID,-10) AS sub_technology_id,
nvl(es_equip.SUB_TECHNOLOGY,''Unknown'') AS sub_technology,SUM(nvl(
QUERY_COUNT,0)) AS query_count,SUM(nvl(QUERY_ANSWERED,0)) AS 
query_answered,SUM(nvl(QUERY_ZERO_ANSWERED,0)) AS query_zero_answered,
SUM(nvl(QUERY_UNANSWERED,0)) AS query_unanswered,SUM(CASE WHEN 
es_response.CATEGORY_ID=7 then nvl(QUERY_COUNT,0) ELSE 0 END) AS 
query_negative_answered,round(SUM(nvl(RESPONSE_DELAY,0)),2) AS 
response_delay,SUM(nvl(RESPONSE_DELAY_COUNT,0)) AS response_delay_count,
round(MIN(nvl(MIN_RESPONSE_DELAY,0)),2) AS min_response_delay,round(MAX(
nvl(MAX_RESPONSE_DELAY,0)),2) AS max_response_delay from us_bb_dns_1 
left outer join ES_RESPONSE_CODE_1 es_response on nvl(
US_BB_DNS_1.RESPONSE_CODE,''-1'') = ES_RESPONSE.RESPONSE_CODE AND (case 
when US_BB_DNS_1.reply_code is not NULL then 107 else -1 end) = 
ES_RESPONSE.protocol_id  left outer join ES_DNS_1 es_dns on nvl(
us_bb_dns_1.DNS_SERVER_IP,''-1'') = es_dns.DNS_SERVER_IP left outer join 
ES_FL_EQUIPMENT_DENORM_1 es_equip ON (nvl(us_bb_dns_1.EQUIP_ID,''-1'') = 
es_equip.EQUIP_ID)
where US_BB_DNS_1.dt >= ''111'' and US_BB_DNS_1.dt < ''112'' and 
tz=''Default'' group by nvl(es_dns.MONITORED_DNS_FLAG,0),
nvl(us_bb_dns_1.DNS_SERVER_IP,''NULL IN SOURCE''), (case when 
us_bb_dns_1.DNS_SERVER_TYPE = 1 then ''Remote''  when 
us_bb_dns_1.DNS_SERVER_TYPE = 2 then ''Local'' else nvl(
es_dns.dns_server_type,''Unknown'') end),nvl(es_equip.TECHNOLOGY,
''Unknown''),nvl(es_equip.SUB_TECHNOLOGY_ID,-10),
nvl(es_equip.SUB_TECHNOLOGY,''Unknown'')"""  # noqa E501
    INPUT_QUERY_2 = """insert overwrite table PS_BB_STR_SEGG_1_HOUR 
    partition(dt='111', tz='Default')
select /*+ STREAMTABLE(tz='Default') */ TECHNOLOGY AS TECHNOLOGY,
EQUIP_ID AS EQUIP_ID,EQUIP_ID_SEQ AS EQUIP_ID_SEQ,SUBSCRIBER_ID AS 
SUBSCRIBER_ID,EQUIP_LATITUDE AS EQUIP_LATITUDE,EQUIP_LONGITUDE AS 
EQUIP_LONGITUDE,CLIENT_DEVICE AS CLIENT_DEVICE,CLIENT_DEVICE_TYPE AS 
CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS AS CLIENT_DEVICE_OS,CONTENT_TYPE AS 
CONTENT_TYPE,CONTENT_PROVIDER AS CONTENT_PROVIDER,MEDIA_CONTAINER AS 
MEDIA_CONTAINER,CDN AS CDN,VIDEO_CODEC AS VIDEO_CODEC,AUDIO_CODEC AS 
AUDIO_CODEC,REGION AS REGION,CITY_ID AS CITY_ID,CITY AS CITY,AREA_ID AS 
AREA_ID,AREA AS AREA,ACCESS_NODE_ID AS ACCESS_NODE_ID,ACCESS_NODE_NAME 
AS ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE AS ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE AS ACCESS_NODE_LONGITUDE,HUB_ID AS HUB_ID,HUB_NAME 
AS HUB_NAME,HUB_LATITUDE AS HUB_LATITUDE,HUB_LONGITUDE AS HUB_LONGITUDE,
EXCHANGE_ID AS EXCHANGE_ID,EXCHANGE_NAME AS EXCHANGE_NAME,
EXCHANGE_LATITUDE AS EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE AS 
EXCHANGE_LONGITUDE,EQUIP_MODEL AS EQUIP_MODEL,EQUIP_VENDOR AS 
EQUIP_VENDOR,DEVICE_CAPABILITY AS DEVICE_CAPABILITY,SUBS_TYPE AS 
SUBS_TYPE,CUSTOMER_SEGMENTATION AS CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY AS CUSTOMER_SUBCATEGORY,GROUP_NAME AS GROUP_NAME,
PARENT_GROUP_NAME AS PARENT_GROUP_NAME,ASSOCIATION_NAME AS 
ASSOCIATION_NAME,SPARE_PS_BB_STR_SEGG_1 AS SPARE_PS_BB_STR_SEGG_1,
SPARE_PS_BB_STR_SEGG_2 AS SPARE_PS_BB_STR_SEGG_2,SPARE_PS_BB_STR_SEGG_3 
AS SPARE_PS_BB_STR_SEGG_3,SPARE_PS_BB_STR_SEGG_4 AS 
SPARE_PS_BB_STR_SEGG_4,SPARE_PS_BB_STR_SEGG_5 AS SPARE_PS_BB_STR_SEGG_5,
SPARE_PS_BB_STR_SEGG_6 AS SPARE_PS_BB_STR_SEGG_6,SPARE_PS_BB_STR_SEGG_7 
AS SPARE_PS_BB_STR_SEGG_7,SPARE_PS_BB_STR_SEGG_8 AS 
SPARE_PS_BB_STR_SEGG_8,SPARE_PS_BB_STR_SEGG_9 AS SPARE_PS_BB_STR_SEGG_9,
SPARE_PS_BB_STR_SEGG_10 AS SPARE_PS_BB_STR_SEGG_10,VIDEO_CODEC_BITRATE 
AS VIDEO_CODEC_BITRATE,AUDIO_CODEC_BITRATE AS AUDIO_CODEC_BITRATE,
VISITS AS VISITS,UPLINK_VOLUME AS UPLINK_VOLUME,DOWNLINK_VOLUME AS 
DOWNLINK_VOLUME,USAGE_TIME AS USAGE_TIME,DELTA_STALL_TIME AS 
DELTA_STALL_TIME,DELTA_STALL_TIME_C AS DELTA_STALL_TIME_C,
DELTA_STALL_COUNT AS DELTA_STALL_COUNT,DELTA_STALL_COUNT_C AS 
DELTA_STALL_COUNT_C,TIME_TO_START AS TIME_TO_START,TIME_TO_START_C AS 
TIME_TO_START_C,QUALITY_TREND AS QUALITY_TREND,QUALITY_TREND_C AS 
QUALITY_TREND_C,NVL(DATA_TRANSFER_TIME_DL,0) AS DATA_TRANSFER_TIME_DL,
NVL(DATA_TRANSFER_TIME_UL,0) AS DATA_TRANSFER_TIME_UL,PACKETS_DL AS 
PACKETS_DL,PACKETS_UL AS PACKETS_UL,LOST_PACKETS AS LOST_PACKETS,
RETRANSMITTED_PACKETS_DL AS RETRANSMITTED_PACKETS_DL,
RETRANSMITTED_PACKETS_UL AS RETRANSMITTED_PACKETS_UL,PACKET_JITTER_DL AS 
PACKET_JITTER_DL,PACKET_JITTER_UL AS PACKET_JITTER_UL,RX_MOS AS RX_MOS,
TX_MOS AS TX_MOS,FRAME_RATE AS FRAME_RATE,SUB_TECHNOLOGY_ID AS 
SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY AS SUB_TECHNOLOGY,STR_RTT_CLIENT AS 
STR_RTT_CLIENT,STR_RTT_CLIENT_C AS STR_RTT_CLIENT_C,STR_RTT_SERVER AS 
STR_RTT_SERVER,STR_RTT_SERVER_C AS STR_RTT_SERVER_C,
STR_TCP_CONNECT_SUCCESS AS STR_TCP_CONNECT_SUCCESS,
STR_TCP_CONNECT_ATTEMPTS AS STR_TCP_CONNECT_ATTEMPTS,
INITIAL_HTTP_REPLY_DATA_MSG AS INITIAL_HTTP_REPLY_DATA_MSG,
INITIAL_HTTP_GET_MSG AS INITIAL_HTTP_GET_MSG,STREAMING_RESPONSE_TIME AS 
STREAMING_RESPONSE_TIME,STREAMING_RESPONSE_TIME_C AS 
STREAMING_RESPONSE_TIME_C,DEVICE_EQUIP_ID AS DEVICE_EQUIP_ID,
DEVICE_SOFTWAREVERSION AS DEVICE_SOFTWAREVERSION,PACKET_JITTER_DL_C AS 
PACKET_JITTER_DL_C,PACKET_JITTER_UL_C AS PACKET_JITTER_UL_C,RX_MOS_C AS 
RX_MOS_C,TX_MOS_C AS TX_MOS_C,FRAME_RATE_C AS FRAME_RATE_C,
STR_LOST_PACKETS_UL AS STR_LOST_PACKETS_UL,STR_LOST_PACKETS_DL AS 
STR_LOST_PACKETS_DL,HTTP_METHOD_COUNT AS HTTP_METHOD_COUNT,
HTTP_FAILURE_COUNT AS HTTP_FAILURE_COUNT,case when ROW_NUMBER=1 then 
SUM_UPLINK_VOLUME else NULL end AS EQUIP_VOLUME_UL,case when 
ROW_NUMBER=1 then SUM_DOWNLINK_VOLUME else NULL end AS EQUIP_VOLUME_DL,
round(case when ROW_NUMBER=1 then (case when (unix_timestamp(
MAX_STOP_TIME_UL)-unix_timestamp(MIN_START_TIME_UL)) < 
SUM_DATA_TRANSFER_TIME_UL/1000 then (unix_timestamp(
MAX_STOP_TIME_UL)-unix_timestamp(MIN_START_TIME_UL)) else 
SUM_DATA_TRANSFER_TIME_UL/1000 end) else NULL end,2) AS 
EQUIP_DURATION_UL,round(case when ROW_NUMBER=1 then (case when (
unix_timestamp(MAX_STOP_TIME_DL)-unix_timestamp(MIN_START_TIME_DL)) < 
SUM_DATA_TRANSFER_TIME_DL/1000 then (unix_timestamp(
MAX_STOP_TIME_DL)-unix_timestamp(MIN_START_TIME_DL)) else 
SUM_DATA_TRANSFER_TIME_DL/1000 end) else NULL end,2) AS 
EQUIP_DURATION_DL from( 
select *, ROW_NUMBER() OVER (PARTITION BY EQUIP_ID order by EQUIP_ID) AS 
ROW_NUMBER,MAX(NEW_EVENT_STOP_UL) OVER (PARTITION BY EQUIP_ID) AS 
MAX_STOP_TIME_UL,MAX(NEW_EVENT_STOP_DL) OVER (PARTITION BY EQUIP_ID) AS 
MAX_STOP_TIME_DL,MIN(NEW_EVENT_START_UL) OVER (PARTITION BY EQUIP_ID) AS 
MIN_START_TIME_UL,MIN(NEW_EVENT_START_DL) OVER (PARTITION BY EQUIP_ID) 
AS MIN_START_TIME_DL,SUM(NEW_UPLINK_VOLUME) OVER (PARTITION BY EQUIP_ID) 
AS SUM_UPLINK_VOLUME,SUM(NEW_DOWNLINK_VOLUME) OVER (PARTITION BY 
EQUIP_ID) AS SUM_DOWNLINK_VOLUME,SUM(NEW_DATA_TRANSFER_TIME_UL) OVER (
PARTITION BY EQUIP_ID) AS SUM_DATA_TRANSFER_TIME_UL,
SUM(NEW_DATA_TRANSFER_TIME_DL) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DATA_TRANSFER_TIME_DL from (
select  
case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end AS TECHNOLOGY,nvl(EQUIP_ID,'NULL IN SOURCE') 
AS EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,decode(EQUIP_LATITUDE,-10,NULL,
EQUIP_LATITUDE) AS EQUIP_LATITUDE,decode(EQUIP_LONGITUDE,-10,NULL,
EQUIP_LONGITUDE) AS EQUIP_LONGITUDE,nvl(CLIENT_DEVICE,'NULL IN SOURCE') 
AS CLIENT_DEVICE,nvl(CLIENT_DEVICE_TYPE,'NULL IN SOURCE') AS 
CLIENT_DEVICE_TYPE,nvl(CLIENT_DEVICE_OS,'NULL IN SOURCE') AS 
CLIENT_DEVICE_OS,nvl(CONTENT_TYPE,'NULL IN SOURCE') AS CONTENT_TYPE,
nvl(CONTENT_PROVIDER,'NULL IN SOURCE') AS CONTENT_PROVIDER,
nvl(MEDIA_CONTAINER,'NULL IN SOURCE') AS MEDIA_CONTAINER,nvl(CDN,
'NULL IN SOURCE') AS CDN,nvl(VIDEO_CODEC,'NULL IN SOURCE') AS 
VIDEO_CODEC,nvl(AUDIO_CODEC,'NULL IN SOURCE') AS AUDIO_CODEC,REGION,
CITY_ID,CITY,AREA_ID,AREA,ACCESS_NODE_ID,ACCESS_NODE_NAME,
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,
HUB_LONGITUDE,EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE,EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1 AS SPARE_PS_BB_STR_SEGG_1,SPARE_US_BB_2 
AS SPARE_PS_BB_STR_SEGG_2,SPARE_US_BB_3 AS SPARE_PS_BB_STR_SEGG_3,
SPARE_US_BB_4 AS SPARE_PS_BB_STR_SEGG_4,SPARE_US_BB_5 AS 
SPARE_PS_BB_STR_SEGG_5,SPARE_US_BB_6 AS SPARE_PS_BB_STR_SEGG_6,
SPARE_US_BB_7 AS SPARE_PS_BB_STR_SEGG_7,SPARE_US_BB_8 AS 
SPARE_PS_BB_STR_SEGG_8,SPARE_US_BB_9 AS SPARE_PS_BB_STR_SEGG_9,
SPARE_US_BB_10 AS SPARE_PS_BB_STR_SEGG_10,round("null",2) AS 
VIDEO_CODEC_BITRATE,round("null",2) AS AUDIO_CODEC_BITRATE,SUM(nvl(
VISITS,0)) AS VISITS,SUM(NVL(bytes_ul,0)) AS UPLINK_VOLUME,SUM(NVL(
BYTES_DL,0)) AS DOWNLINK_VOLUME,SUM(nvl(TIME_DURATION,0)) AS USAGE_TIME,
SUM(NVL(DELTA_STALL_TIME,0)) AS DELTA_STALL_TIME,SUM(CASE WHEN NVL(
DELTA_STALL_TIME_C,0) = 0 THEN CASE WHEN DELTA_STALL_TIME >= 0 THEN 1 
ELSE 0 END ELSE DELTA_STALL_TIME_C END) AS DELTA_STALL_TIME_C,SUM(NVL(
DELTA_STALL_COUNT,0)) AS DELTA_STALL_COUNT,SUM(CASE WHEN 
DELTA_STALL_COUNT>=0 THEN 1 ELSE 0 END) AS DELTA_STALL_COUNT_C,
round(SUM(NVL(TIME_TO_START,0)),2) AS TIME_TO_START,SUM(CASE WHEN NVL(
TIME_TO_START_C,0) = 0 THEN CASE WHEN TIME_TO_START > 0 THEN 1 ELSE 0 
END ELSE TIME_TO_START_C END) AS TIME_TO_START_C,SUM(NVL(UPSHIFT_COUNT,
0) - NVL(DOWNSHIFT_COUNT,0)) AS QUALITY_TREND,SUM(CASE WHEN coalesce(
UPSHIFT_COUNT,DOWNSHIFT_COUNT,0) > 0 THEN 1 ELSE 0 END) AS 
QUALITY_TREND_C,case when nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) 
- min(CAST(EVENT_START_DL as DOUBLE))) * 1000),0) < sum(nvl(
DATA_TRANSFER_TIME_DL,0)) then (nvl(round((max(CAST(EVENT_STOP_DL AS 
DOUBLE)) - min(CAST(EVENT_START_DL as DOUBLE))) * 1000),0)) else sum(
nvl(DATA_TRANSFER_TIME_DL,0)) end AS DATA_TRANSFER_TIME_DL,case when 
nvl(round((max(CAST(EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL 
as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_UL,0)) then nvl(
round((max(CAST(EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL as 
DOUBLE))) * 1000),0) else sum(nvl(DATA_TRANSFER_TIME_UL,0)) end AS 
DATA_TRANSFER_TIME_UL,SUM(NVL(PACKETS_DL,0)) AS PACKETS_DL,SUM(NVL(
PACKETS_UL,0)) AS PACKETS_UL,SUM(NVL(LOST_PACKETS,0)) AS LOST_PACKETS,
SUM(NVL(RETRANSMITTED_PACKETS_DL,0)) AS RETRANSMITTED_PACKETS_DL,
SUM(NVL(RETRANSMITTED_PACKETS_UL,0)) AS RETRANSMITTED_PACKETS_UL,
SUM(NVL(PACKET_JITTER_DL,0)) AS PACKET_JITTER_DL,SUM(NVL(
PACKET_JITTER_UL,0)) AS PACKET_JITTER_UL,round(SUM(NVL(RX_MOS,0)),
2) AS RX_MOS,round(SUM(NVL(TX_MOS,0)),2) AS TX_MOS,SUM(NVL(FRAME_RATE,
0)) AS FRAME_RATE,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,round(SUM(nvl(
RTT_CLIENT,0.0)),2) AS STR_RTT_CLIENT,SUM(CASE WHEN NVL(RTT_CLIENT_C,
0) = 0 THEN CASE WHEN RTT_CLIENT > 0 THEN 1 ELSE 0 END ELSE RTT_CLIENT_C 
END) AS STR_RTT_CLIENT_C,round(SUM(nvl(RTT_SERVER,0.0)),2) AS 
STR_RTT_SERVER,SUM(CASE WHEN NVL(RTT_SERVER_C,0) = 0 THEN CASE WHEN 
RTT_SERVER > 0 THEN 1 ELSE 0 END ELSE RTT_SERVER_C END) AS 
STR_RTT_SERVER_C,SUM(nvl(TCP_CONNECT_SUCCESS,0)) AS 
STR_TCP_CONNECT_SUCCESS,SUM(nvl(TCP_CONNECT_ATTEMPTS,0)) AS 
STR_TCP_CONNECT_ATTEMPTS,SUM(nvl(INITIAL_HTTP_REPLY_DATA_MSG,0)) AS 
INITIAL_HTTP_REPLY_DATA_MSG,SUM(nvl(INITIAL_HTTP_GET_MSG,0)) AS 
INITIAL_HTTP_GET_MSG,round(SUM(nvl(STREAMING_RESPONSE_TIME,0)),
2) AS STREAMING_RESPONSE_TIME,SUM(CASE WHEN NVL(
STREAMING_RESPONSE_TIME_C,0) = 0 THEN CASE WHEN STREAMING_RESPONSE_TIME 
>  0 THEN 1 ELSE 0 END ELSE STREAMING_RESPONSE_TIME_C END) AS 
STREAMING_RESPONSE_TIME_C,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION,
SUM(CASE WHEN NVL(PACKET_JITTER_DL_C,0) = 0 THEN CASE WHEN 
PACKET_JITTER_DL >= 0 THEN 1 ELSE 0 END ELSE PACKET_JITTER_DL_C END) AS 
PACKET_JITTER_DL_C,SUM(CASE WHEN NVL(PACKET_JITTER_UL_C,0) = 0 THEN CASE 
WHEN PACKET_JITTER_UL >= 0 THEN 1 ELSE 0 END ELSE PACKET_JITTER_UL_C 
END) AS PACKET_JITTER_UL_C,SUM(case when RX_MOS > 0 then 1 else 0 end) 
AS RX_MOS_C,SUM(case when TX_MOS > 0 then 1 else 0 end) AS TX_MOS_C,
SUM(case when FRAME_RATE > 0 then 1 else 0 end) AS FRAME_RATE_C,SUM(NVL(
LOST_PACKETS_UL,0)) AS STR_LOST_PACKETS_UL,SUM(NVL(LOST_PACKETS_DL,
0)) AS STR_LOST_PACKETS_DL,SUM(NVL(HTTP_METHOD_COUNT,0)) AS 
HTTP_METHOD_COUNT,SUM(case when (CATEGORY_ID=7 OR HTTP_CAUSE_CODE 
BETWEEN 400 AND 599) then NVL(HTTP_CAUSE_CODE_COUNT,0) else 0 end) AS 
HTTP_FAILURE_COUNT,MIN(case when bytes_ul/data_transfer_time_ul>0 then 
EVENT_START_UL else NULL end) AS NEW_EVENT_START_UL,MIN(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end) AS 
NEW_EVENT_START_DL,from_unixtime(CAST(NVL(case when unix_timestamp(max(
case when bytes_ul/data_transfer_time_ul>0 then EVENT_STOP_UL else NULL 
end)) - unix_timestamp(min(case when bytes_ul/data_transfer_time_ul>0 
then EVENT_START_UL else NULL end)) < sum(case when 
bytes_ul/data_transfer_time_ul>0 then DATA_TRANSFER_TIME_UL/1000 else 
NULL end) then unix_timestamp(max(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_STOP_UL else NULL end)) - 
unix_timestamp(min(case when bytes_ul/data_transfer_time_ul>0 then 
EVENT_START_UL else NULL end)) else sum(case when 
bytes_ul/data_transfer_time_ul>0 then DATA_TRANSFER_TIME_UL/1000 else 
NULL end) end,0)+(unix_timestamp(min(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_START_UL else NULL end))) AS 
BIGINT)) AS NEW_EVENT_STOP_UL,from_unixtime(CAST(NVL(case when 
unix_timestamp(max(case when bytes_dl/data_transfer_time_dl>0 then 
EVENT_STOP_DL else NULL end)) - unix_timestamp(min(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end)) < 
sum(case when bytes_dl/data_transfer_time_dl>0 then 
DATA_TRANSFER_TIME_DL/1000 else NULL end) then unix_timestamp(max(case 
when bytes_dl/data_transfer_time_dl>0 then EVENT_STOP_DL else NULL end)) 
- unix_timestamp(min(case when bytes_dl/data_transfer_time_dl>0 then 
EVENT_START_DL else NULL end)) else sum(case when 
bytes_dl/data_transfer_time_dl>0 then DATA_TRANSFER_TIME_DL/1000 else 
NULL end) end,0)+(unix_timestamp(min(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end))) AS 
BIGINT)) AS NEW_EVENT_STOP_DL, case when round((max(CAST(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_STOP_DL else NULL end AS 
DOUBLE)) - min(CAST(case when bytes_dl/data_transfer_time_dl>0 then 
EVENT_START_DL else NULL end as DOUBLE))) * 1000) < sum(case when 
bytes_dl/data_transfer_time_dl>0 then DATA_TRANSFER_TIME_DL else NULL 
end) then (round((max(CAST(case when bytes_dl/data_transfer_time_dl>0 
then EVENT_STOP_DL else NULL end AS DOUBLE)) - min(CAST(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end as 
DOUBLE))) * 1000)) else sum(case when bytes_dl/data_transfer_time_dl>0 
then DATA_TRANSFER_TIME_DL else NULL end) end AS 
NEW_DATA_TRANSFER_TIME_DL, case when round((max(CAST(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_STOP_UL else NULL end AS 
DOUBLE)) - min(CAST(case when bytes_ul/data_transfer_time_ul>0 then 
EVENT_START_UL else NULL end as DOUBLE))) * 1000) < sum(case when 
bytes_ul/data_transfer_time_ul>0 then DATA_TRANSFER_TIME_UL else NULL 
end) then (round((max(CAST(case when bytes_ul/data_transfer_time_ul>0 
then EVENT_STOP_UL else NULL end AS DOUBLE)) - min(CAST(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_START_UL else NULL end as 
DOUBLE))) * 1000)) else sum(case when bytes_ul/data_transfer_time_ul>0 
then DATA_TRANSFER_TIME_UL else NULL end) end AS 
NEW_DATA_TRANSFER_TIME_UL,SUM(case when bytes_ul/data_transfer_time_ul>0 
then BYTES_UL else NULL end) AS NEW_UPLINK_VOLUME,SUM(case when 
bytes_dl/data_transfer_time_dl>0 then BYTES_DL else NULL end) AS 
NEW_DOWNLINK_VOLUME from US_BB_STREAMING_1 where US_BB_STREAMING_1.dt >= 
'111' and US_BB_STREAMING_1.dt < '112' AND ((CONTENT_TYPE IN ('VIDEO',
'AUDIO')))
  group by case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end,nvl(EQUIP_ID,'NULL IN SOURCE'),EQUIP_ID_SEQ,
SUBSCRIBER_ID,decode(EQUIP_LATITUDE,-10,NULL,EQUIP_LATITUDE),decode(
EQUIP_LONGITUDE,-10,NULL,EQUIP_LONGITUDE),nvl(CLIENT_DEVICE,'NULL IN 
SOURCE'),nvl(CLIENT_DEVICE_TYPE,'NULL IN SOURCE'),nvl(CLIENT_DEVICE_OS,
'NULL IN SOURCE'),nvl(CONTENT_TYPE,'NULL IN SOURCE'),
nvl(CONTENT_PROVIDER,'NULL IN SOURCE'),nvl(MEDIA_CONTAINER,'NULL IN 
SOURCE'),nvl(CDN,'NULL IN SOURCE'),nvl(VIDEO_CODEC,'NULL IN SOURCE'),
nvl(AUDIO_CODEC,'NULL IN SOURCE'),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION ) temp ) temp2"""  # noqa E501
    INPUT_QUERY_3 = """insert  overwrite table PS_BB_APP_SEGG_1_HOUR 
    partition(dt=''111'', tz='TZ1-Default')
select /*+ STREAMTABLE( tz='TZ1-Default') */ TECHNOLOGY,nvl(EQUIP_ID,
''NULL IN SOURCE'') EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,decode(
EQUIP_LATITUDE,-10,NULL,EQUIP_LATITUDE) EQUIP_LATITUDE, decode(
EQUIP_LONGITUDE,-10,NULL,EQUIP_LONGITUDE) EQUIP_LONGITUDE,
nvl(CLIENT_DEVICE,''NULL IN SOURCE'') CLIENT_DEVICE,
nvl(CLIENT_DEVICE_TYPE,''NULL IN SOURCE'') CLIENT_DEVICE_TYPE,
nvl(CLIENT_DEVICE_OS,''NULL IN SOURCE'') CLIENT_DEVICE_OS,
APPLICATION_NAME,decode(MONITORED_APP_FLAG,-10,0,nvl(MONITORED_APP_FLAG,
0)) MONITORED_APP_FLAG, APPLICATION_CATEGORY,  APP_CATEGORY_TYPE, 
REGION,CITY_ID,CITY,AREA_ID,AREA,ACCESS_NODE_ID,ACCESS_NODE_NAME,
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE, HUB_ID,HUB_NAME,
HUB_LATITUDE,HUB_LONGITUDE,EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE,EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,nvl(SPARE_PS_BB_SEGG_1,''Unknown'') SPARE_PS_BB_SEGG_1, 
nvl(SPARE_PS_BB_SEGG_2,''Unknown'') SPARE_PS_BB_SEGG_2, 
nvl(SPARE_PS_BB_SEGG_3,''Unknown'') SPARE_PS_BB_SEGG_3,
nvl(SPARE_PS_BB_SEGG_4,''Unknown'') SPARE_PS_BB_SEGG_4, 
nvl(SPARE_PS_BB_SEGG_5,''Unknown'') SPARE_PS_BB_SEGG_5, 
nvl(SPARE_PS_BB_SEGG_6,''Unknown'') SPARE_PS_BB_SEGG_6, 
nvl(SPARE_PS_BB_SEGG_7,''Unknown'') SPARE_PS_BB_SEGG_7,
nvl(SPARE_PS_BB_SEGG_8,''Unknown'') SPARE_PS_BB_SEGG_8, 
nvl(SPARE_PS_BB_SEGG_9,''Unknown'') SPARE_PS_BB_SEGG_9, 
nvl(SPARE_PS_BB_SEGG_10,''Unknown'') SPARE_PS_BB_SEGG_10, nvl(SUM(
HTTP_METHOD_COUNT),0) as HTTP_METHOD_COUNT,nvl(SUM(HTTP_4XX_COUNT),
0) as HTTP_4XX_COUNT,nvl(SUM(HTTP_5XX_COUNT),0) as HTTP_5XX_COUNT,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then round(nvl(coalesce(
SUM(RESPONSE_TIME_STR),SUM(RESPONSE_TIME_APP),SUM(RESPONSE_TIME_BR)),0),
2) WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then round(nvl(coalesce(
SUM(RESPONSE_TIME_BR),SUM(RESPONSE_TIME_APP),SUM(RESPONSE_TIME_STR)),0),
2) else round(nvl(coalesce(SUM(RESPONSE_TIME_APP),
SUM(RESPONSE_TIME_STR),SUM(RESPONSE_TIME_BR)),0),2) end as 
APPLICATION_RESPONSE_TIME,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
RESPONSE_TIME_C_STR),SUM(RESPONSE_TIME_C_APP),SUM(RESPONSE_TIME_C_BR)),
0) WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
RESPONSE_TIME_C_BR),SUM(RESPONSE_TIME_C_APP),SUM(RESPONSE_TIME_C_STR)),
0) else nvl(coalesce(SUM(RESPONSE_TIME_C_APP),SUM(RESPONSE_TIME_C_STR),
SUM(RESPONSE_TIME_C_BR)),0) end as APPLICATION_RESPONSE_TIME_C,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then round(nvl(coalesce(
SUM(RTT_CLIENT_STR),SUM(RTT_CLIENT_APP),SUM(RTT_CLIENT_BR)),0),2) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then round(nvl(coalesce(SUM(
RTT_CLIENT_BR),SUM(RTT_CLIENT_APP),SUM(RTT_CLIENT_STR)),0),2) else 
round(nvl(coalesce(SUM(RTT_CLIENT_APP),SUM(RTT_CLIENT_STR),
SUM(RTT_CLIENT_BR)),0),2) end as RTT_CLIENT,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
RTT_CLIENT_C_STR),SUM(RTT_CLIENT_C_APP),SUM(RTT_CLIENT_C_BR)),0) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
RTT_CLIENT_C_BR),SUM(RTT_CLIENT_C_APP),SUM(RTT_CLIENT_C_STR)),0) else 
nvl(coalesce(SUM(RTT_CLIENT_C_APP),SUM(RTT_CLIENT_C_STR),
SUM(RTT_CLIENT_C_BR)),0) end as RTT_CLIENT_C,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then round(nvl(coalesce(
SUM(RTT_SERVER_STR),SUM(RTT_SERVER_APP),SUM(RTT_SERVER_BR)),0),2) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then round(nvl(coalesce(SUM(
RTT_SERVER_BR),SUM(RTT_SERVER_APP),SUM(RTT_SERVER_STR)),0),2) else 
round(nvl(coalesce(SUM(RTT_SERVER_APP),SUM(RTT_SERVER_STR),
SUM(RTT_SERVER_BR)),0),2) end as RTT_SERVER,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
RTT_SERVER_C_STR),SUM(RTT_SERVER_C_APP),SUM(RTT_SERVER_C_BR)),0) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
RTT_SERVER_C_BR),SUM(RTT_SERVER_C_APP),SUM(RTT_SERVER_C_STR)),0) else 
nvl(coalesce(SUM(RTT_SERVER_C_APP),SUM(RTT_SERVER_C_STR),
SUM(RTT_SERVER_C_BR)),0) end as RTT_SERVER_C, CASE WHEN 
APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(VISITS_STR),
SUM(VISITS_APP),SUM(VISITS_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(VISITS_BR),SUM(VISITS_APP),
SUM(VISITS_STR)),0) else nvl(coalesce(SUM(VISITS_APP),SUM(VISITS_STR),
SUM(VISITS_BR)),0) end as VISITS,CASE WHEN 
APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
DOWNLINK_VOLUME_STR),SUM(DOWNLINK_VOLUME_APP),SUM(DOWNLINK_VOLUME_BR)),
0) WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
DOWNLINK_VOLUME_BR),SUM(DOWNLINK_VOLUME_APP),SUM(DOWNLINK_VOLUME_STR)),
0) else nvl(coalesce(SUM(DOWNLINK_VOLUME_APP),SUM(DOWNLINK_VOLUME_STR),
SUM(DOWNLINK_VOLUME_BR)),0) end as DOWNLINK_VOLUME,CASE WHEN 
APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
UPLINK_VOLUME_STR),SUM(UPLINK_VOLUME_APP),SUM(UPLINK_VOLUME_BR)),0) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
UPLINK_VOLUME_BR),SUM(UPLINK_VOLUME_APP),SUM(UPLINK_VOLUME_STR)),0) else 
nvl(coalesce(SUM(UPLINK_VOLUME_APP),SUM(UPLINK_VOLUME_STR),
SUM(UPLINK_VOLUME_BR)),0) end as UPLINK_VOLUME, CASE WHEN 
APP_CATEGORY_TYPE=''STREAMING_TYPE'' then  coalesce(SUM(
STR_USAGE_TIME_AUDIO+STR_USAGE_TIME_VIDEO),SUM(USAGE_TIME),0) else 
coalesce(SUM(USAGE_TIME),SUM(STR_USAGE_TIME_AUDIO+STR_USAGE_TIME_VIDEO),
0) end as USAGE_TIME,nvl(SUM(STR_USAGE_TIME_AUDIO),0) as 
STR_USAGE_TIME_AUDIO,nvl(SUM(DELTA_STALL_TIME_AUDIO),0) as 
DELTA_STALL_TIME_AUDIO,nvl(SUM(DELTA_STALL_TIME_AUDIO_C),0) as 
DELTA_STALL_TIME_AUDIO_C,nvl(SUM(DELTA_STALL_COUNT_AUDIO),0) as 
DELTA_STALL_COUNT_AUDIO,nvl(SUM(DELTA_STALL_COUNT_AUDIO_C),0) as 
DELTA_STALL_COUNT_AUDIO_C,round(nvl(SUM(TIME_TO_START_AUDIO),0),
2) as TIME_TO_START_AUDIO,nvl(SUM(TIME_TO_START_AUDIO_C),0) as 
TIME_TO_START_AUDIO_C,nvl(SUM(QUALITY_TREND_AUDIO),0) as 
QUALITY_TREND_AUDIO,nvl(SUM(QUALITY_TREND_AUDIO_C),0) as 
QUALITY_TREND_AUDIO_C,nvl(SUM(STR_USAGE_TIME_VIDEO),0) as 
STR_USAGE_TIME_VIDEO, nvl(SUM(DELTA_STALL_TIME_VIDEO),0) as 
DELTA_STALL_TIME_VIDEO,nvl(SUM(DELTA_STALL_TIME_VIDEO_C),0) as 
DELTA_STALL_TIME_VIDEO_C,nvl(SUM(DELTA_STALL_COUNT_VIDEO),0) as 
DELTA_STALL_COUNT_VIDEO,nvl(SUM(DELTA_STALL_COUNT_VIDEO_C),0) as 
DELTA_STALL_COUNT_VIDEO_C, round(nvl(SUM(TIME_TO_START_VIDEO),0),
2) as TIME_TO_START_VIDEO,nvl(SUM(TIME_TO_START_VIDEO_C),0) as 
TIME_TO_START_VIDEO_C,nvl(SUM(QUALITY_TREND_VIDEO),0) as 
QUALITY_TREND_VIDEO,nvl(SUM(QUALITY_TREND_VIDEO_C),0) as 
QUALITY_TREND_VIDEO_C, nvl(SUM(VISITS_BR),0) as BROWSING_VISITS, 
nvl(SUM(VISITS_APP),0) as APPLICATION_VISITS, nvl(SUM(VISITS_STR),
0) as STREAMING_VISITS, nvl(SUM(UPLINK_VOLUME_STR),0) as 
STREAMING_UPLINK_VOLUME, nvl(SUM(DOWNLINK_VOLUME_STR),0) as 
STREAMING_DOWNLINK_VOLUME,SUB_TECHNOLOGY_ID, SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION,CASE WHEN 
APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
INITIAL_RESP_SUCCESS_STR),SUM(INITIAL_RESP_SUCCESS_APP),
SUM(INITIAL_RESP_SUCCESS_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(INITIAL_RESP_SUCCESS_BR),
SUM(INITIAL_RESP_SUCCESS_APP),SUM(INITIAL_RESP_SUCCESS_STR)),0) else 
nvl(coalesce(SUM(INITIAL_RESP_SUCCESS_APP),
SUM(INITIAL_RESP_SUCCESS_STR),SUM(INITIAL_RESP_SUCCESS_BR)),0) END AS 
INITIAL_APP_RESP_SUCCESS,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
INITIAL_RESP_ATTEMPTS_STR),SUM(INITIAL_RESP_ATTEMPTS_APP),
SUM(INITIAL_RESP_ATTEMPTS_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(INITIAL_RESP_ATTEMPTS_BR),
SUM(INITIAL_RESP_ATTEMPTS_APP),SUM(INITIAL_RESP_ATTEMPTS_STR)),0) else 
nvl(coalesce(SUM(INITIAL_RESP_ATTEMPTS_APP),
SUM(INITIAL_RESP_ATTEMPTS_STR),SUM(INITIAL_RESP_ATTEMPTS_BR)),0) end as 
INITIAL_APP_RESP_ATTEMPTS,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
TCP_CONNECT_SUCCESS_STR),SUM(TCP_CONNECT_SUCCESS_APP),
SUM(TCP_CONNECT_SUCCESS_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(TCP_CONNECT_SUCCESS_BR),
SUM(TCP_CONNECT_SUCCESS_APP),SUM(TCP_CONNECT_SUCCESS_STR)),0) else nvl(
coalesce(SUM(TCP_CONNECT_SUCCESS_APP),SUM(TCP_CONNECT_SUCCESS_STR),
SUM(TCP_CONNECT_SUCCESS_BR)),0) end as APP_TCP_CONNECT_SUCCESS,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
TCP_CONNECT_ATTEMPTS_STR),SUM(TCP_CONNECT_ATTEMPTS_APP),
SUM(TCP_CONNECT_ATTEMPTS_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(TCP_CONNECT_ATTEMPTS_BR),
SUM(TCP_CONNECT_ATTEMPTS_APP),SUM(TCP_CONNECT_ATTEMPTS_STR)),0) else 
nvl(coalesce(SUM(TCP_CONNECT_ATTEMPTS_APP),
SUM(TCP_CONNECT_ATTEMPTS_STR),SUM(TCP_CONNECT_ATTEMPTS_BR)),0) end as 
APP_TCP_CONNECT_ATTEMPTS,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
PACKETS_DL_STR),SUM(PACKETS_DL_APP),SUM(PACKETS_DL_BR)),0) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
PACKETS_DL_BR),SUM(PACKETS_DL_APP),SUM(PACKETS_DL_STR)),0) else nvl(
coalesce(SUM(PACKETS_DL_APP),SUM(PACKETS_DL_STR),SUM(PACKETS_DL_BR)),
0) end as APP_PACKETS_DL,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
PACKETS_UL_STR),SUM(PACKETS_UL_APP),SUM(PACKETS_UL_BR)),0) WHEN 
APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
PACKETS_UL_BR),SUM(PACKETS_UL_APP),SUM(PACKETS_UL_STR)),0) else nvl(
coalesce(SUM(PACKETS_UL_APP),SUM(PACKETS_UL_STR),SUM(PACKETS_UL_BR)),
0) end as APP_PACKETS_UL,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
RETRANSMITTED_PACKETS_DL_STR),SUM(RETRANSMITTED_PACKETS_DL_APP),
SUM(RETRANSMITTED_PACKETS_DL_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(RETRANSMITTED_PACKETS_DL_BR),
SUM(RETRANSMITTED_PACKETS_DL_APP),SUM(RETRANSMITTED_PACKETS_DL_STR)),
0) else nvl(coalesce(SUM(RETRANSMITTED_PACKETS_DL_APP),
SUM(RETRANSMITTED_PACKETS_DL_STR),SUM(RETRANSMITTED_PACKETS_DL_BR)),
0) end as APP_RETRANSMITTED_PACKETS_DL,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
RETRANSMITTED_PACKETS_UL_STR),SUM(RETRANSMITTED_PACKETS_UL_APP),
SUM(RETRANSMITTED_PACKETS_UL_BR)),0) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then nvl(coalesce(SUM(RETRANSMITTED_PACKETS_UL_BR),
SUM(RETRANSMITTED_PACKETS_UL_APP),SUM(RETRANSMITTED_PACKETS_UL_STR)),
0) else nvl(coalesce(SUM(RETRANSMITTED_PACKETS_UL_APP),
SUM(RETRANSMITTED_PACKETS_UL_STR),SUM(RETRANSMITTED_PACKETS_UL_BR)),
0) end as APP_RETRANSMITTED_PACKETS_UL,
CASE WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then round(nvl(coalesce(
SUM(LOAD_TIME_BR),SUM(LOAD_TIME_APP)),0),2) else round(nvl(coalesce(SUM(
LOAD_TIME_APP),SUM(LOAD_TIME_BR)),0),2) end as APP_LOAD_TIME,
CASE WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
LOAD_TIME_C_BR),SUM(LOAD_TIME_C_APP)),0) else nvl(coalesce(SUM(
LOAD_TIME_C_APP),SUM(LOAD_TIME_C_BR)),0) end as APP_LOAD_TIME_C,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then round(nvl(coalesce(
SUM(DATA_TRANSFER_TIME_DL_STR),SUM(DATA_TRANSFER_TIME_DL_APP),
SUM(DATA_TRANSFER_TIME_DL_BR)),0),2) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_DL_BR),
SUM(DATA_TRANSFER_TIME_DL_APP),SUM(DATA_TRANSFER_TIME_DL_STR)),0),
2) else round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_DL_APP),
SUM(DATA_TRANSFER_TIME_DL_STR),SUM(DATA_TRANSFER_TIME_DL_BR)),0),2) end 
as DATA_TRANSFER_TIME_DL,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then round(nvl(coalesce(
SUM(DATA_TRANSFER_TIME_UL_STR),SUM(DATA_TRANSFER_TIME_UL_APP),
SUM(DATA_TRANSFER_TIME_UL_BR)),0),2) WHEN APP_CATEGORY_TYPE = 
''BROWSING_TYPE'' then round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_UL_BR),
SUM(DATA_TRANSFER_TIME_UL_APP),SUM(DATA_TRANSFER_TIME_UL_STR)),0),
2) else round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_UL_APP),
SUM(DATA_TRANSFER_TIME_UL_STR),SUM(DATA_TRANSFER_TIME_UL_BR)),0),2) end 
as DATA_TRANSFER_TIME_UL,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
LOST_PACKETS_UL_STR),SUM(LOST_PACKETS_UL_APP),SUM(LOST_PACKETS_UL_BR)),
0) WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
LOST_PACKETS_UL_BR),SUM(LOST_PACKETS_UL_APP),SUM(LOST_PACKETS_UL_STR)),
0) else nvl(coalesce(SUM(LOST_PACKETS_UL_APP),SUM(LOST_PACKETS_UL_STR),
SUM(LOST_PACKETS_UL_BR)),0) end as APP_LOST_PACKETS_UL,
CASE WHEN APP_CATEGORY_TYPE=''STREAMING_TYPE'' then nvl(coalesce(SUM(
LOST_PACKETS_DL_STR),SUM(LOST_PACKETS_DL_APP),SUM(LOST_PACKETS_DL_BR)),
0) WHEN APP_CATEGORY_TYPE = ''BROWSING_TYPE'' then nvl(coalesce(SUM(
LOST_PACKETS_DL_BR),SUM(LOST_PACKETS_DL_APP),SUM(LOST_PACKETS_DL_STR)),
0) else nvl(coalesce(SUM(LOST_PACKETS_DL_APP),SUM(LOST_PACKETS_DL_STR),
SUM(LOST_PACKETS_DL_BR)),0) end as APP_LOST_PACKETS_DL,
SUM(NVL(HTTP_METHOD_COUNT_STR,0)) AS STREAMING_HTTP_METHOD_COUNT,
SUM(NVL(HTTP_FAILURE_COUNT_STR,0)) AS STREAMING_HTTP_FAILURE_COUNT, 
SUM(EQUIP_VOLUME_UL) AS EQUIP_VOLUME_UL, SUM(EQUIP_VOLUME_DL) AS 
EQUIP_VOLUME_DL, SUM(EQUIP_DURATION_UL) AS EQUIP_DURATION_UL, 
SUM(EQUIP_DURATION_DL) AS EQUIP_DURATION_DL
 from
(
select TECHNOLOGY,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,EQUIP_LATITUDE,
EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS,
APPLICATION_NAME, MONITORED_APP_FLAG,APPLICATION_CATEGORY,
APP_CATEGORY_TYPE,REGION,CITY_ID,CITY,AREA_ID,AREA,ACCESS_NODE_ID,
ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE, ACCESS_NODE_LONGITUDE,HUB_ID,
HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,EXCHANGE_ID,EXCHANGE_NAME,
EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,EQUIP_MODEL, EQUIP_VENDOR,
DEVICE_CAPABILITY,SUBS_TYPE,CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,
GROUP_NAME,PARENT_GROUP_NAME,ASSOCIATION_NAME,SPARE_PS_BB_SEGG_1, 
SPARE_PS_BB_SEGG_2,SPARE_PS_BB_SEGG_3,SPARE_PS_BB_SEGG_4,
SPARE_PS_BB_SEGG_5,SPARE_PS_BB_SEGG_6,SPARE_PS_BB_SEGG_7,
SPARE_PS_BB_SEGG_8,SPARE_PS_BB_SEGG_9,SPARE_PS_BB_SEGG_10,
HTTP_METHOD_COUNT,HTTP_4XX_COUNT,HTTP_5XX_COUNT,VISITS_APP,VISITS_BR,
VISITS_STR,DOWNLINK_VOLUME_APP,UPLINK_VOLUME_APP,DOWNLINK_VOLUME_BR,
UPLINK_VOLUME_BR,DOWNLINK_VOLUME_STR,UPLINK_VOLUME_STR,USAGE_TIME,
STR_USAGE_TIME_AUDIO,DELTA_STALL_TIME_AUDIO,DELTA_STALL_TIME_AUDIO_C,
DELTA_STALL_COUNT_AUDIO,DELTA_STALL_COUNT_AUDIO_C,TIME_TO_START_AUDIO,
TIME_TO_START_AUDIO_C,QUALITY_TREND_AUDIO,QUALITY_TREND_AUDIO_C,
STR_USAGE_TIME_VIDEO,DELTA_STALL_TIME_VIDEO,DELTA_STALL_TIME_VIDEO_C,
DELTA_STALL_COUNT_VIDEO,DELTA_STALL_COUNT_VIDEO_C,TIME_TO_START_VIDEO,
TIME_TO_START_VIDEO_C,QUALITY_TREND_VIDEO,QUALITY_TREND_VIDEO_C,
SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION, 
INITIAL_RESP_SUCCESS_STR, INITIAL_RESP_SUCCESS_BR, 
INITIAL_RESP_SUCCESS_APP, INITIAL_RESP_ATTEMPTS_STR, 
INITIAL_RESP_ATTEMPTS_BR, INITIAL_RESP_ATTEMPTS_APP, 
TCP_CONNECT_SUCCESS_STR, TCP_CONNECT_SUCCESS_BR, 
TCP_CONNECT_SUCCESS_APP, TCP_CONNECT_ATTEMPTS_STR, 
TCP_CONNECT_ATTEMPTS_BR, TCP_CONNECT_ATTEMPTS_APP, PACKETS_DL_STR, 
PACKETS_DL_BR, PACKETS_DL_APP, PACKETS_UL_STR, PACKETS_UL_BR, 
PACKETS_UL_APP, RETRANSMITTED_PACKETS_DL_STR, 
RETRANSMITTED_PACKETS_DL_BR, RETRANSMITTED_PACKETS_DL_APP, 
RETRANSMITTED_PACKETS_UL_STR, RETRANSMITTED_PACKETS_UL_BR, 
RETRANSMITTED_PACKETS_UL_APP, LOAD_TIME_BR, LOAD_TIME_APP, 
LOAD_TIME_C_BR, LOAD_TIME_C_APP, DATA_TRANSFER_TIME_DL_STR, 
DATA_TRANSFER_TIME_DL_BR, DATA_TRANSFER_TIME_DL_APP, 
DATA_TRANSFER_TIME_UL_STR, DATA_TRANSFER_TIME_UL_BR, 
DATA_TRANSFER_TIME_UL_APP, RESPONSE_TIME_STR, RESPONSE_TIME_BR, 
RESPONSE_TIME_APP, RESPONSE_TIME_C_STR, RESPONSE_TIME_C_BR, 
RESPONSE_TIME_C_APP, RTT_CLIENT_STR, RTT_CLIENT_BR, RTT_CLIENT_APP, 
RTT_CLIENT_C_STR, RTT_CLIENT_C_BR, RTT_CLIENT_C_APP, RTT_SERVER_STR, 
RTT_SERVER_BR, RTT_SERVER_APP, RTT_SERVER_C_STR, RTT_SERVER_C_BR, 
RTT_SERVER_C_APP, LOST_PACKETS_UL_APP, LOST_PACKETS_DL_APP, 
LOST_PACKETS_UL_BR, LOST_PACKETS_DL_BR, LOST_PACKETS_UL_STR, 
LOST_PACKETS_DL_STR, HTTP_METHOD_COUNT_STR, HTTP_FAILURE_COUNT_STR, 
(CASE WHEN ROW_NUMBER=1 THEN SUM_UPLINK_VOLUME ELSE NULL END) AS 
EQUIP_VOLUME_UL,
(CASE WHEN ROW_NUMBER=1 THEN SUM_DOWNLINK_VOLUME ELSE NULL END) AS 
EQUIP_VOLUME_DL,
(CASE WHEN ROW_NUMBER=1 THEN 
ROUND((CASE WHEN (unix_timestamp(MAX_STOP_TIME_UL)-unix_timestamp(
MIN_START_TIME_UL)) < SUM_DATA_TRANSFER_TIME_UL/1000 THEN (
unix_timestamp(MAX_STOP_TIME_UL)-unix_timestamp(MIN_START_TIME_UL)) ELSE 
SUM_DATA_TRANSFER_TIME_UL/1000 END),2) 
ELSE NULL END) AS EQUIP_DURATION_UL,
(CASE WHEN ROW_NUMBER=1 THEN 
ROUND((CASE WHEN (unix_timestamp(MAX_STOP_TIME_DL)-unix_timestamp(
MIN_START_TIME_DL)) < SUM_DATA_TRANSFER_TIME_DL/1000 THEN (
unix_timestamp(MAX_STOP_TIME_DL)-unix_timestamp(MIN_START_TIME_DL)) ELSE 
SUM_DATA_TRANSFER_TIME_DL/1000 END),2) 
ELSE NULL END) AS EQUIP_DURATION_DL
from
(select *, ROW_NUMBER() OVER (PARTITION BY EQUIP_ID order by EQUIP_ID) 
AS ROW_NUMBER,
MIN(NEW_EVENT_START_DL) OVER (PARTITION BY EQUIP_ID) AS MIN_START_TIME_DL,
MIN(NEW_EVENT_START_UL) OVER (PARTITION BY EQUIP_ID) AS MIN_START_TIME_UL,
MAX(NEW_EVENT_STOP_DL) OVER (PARTITION BY EQUIP_ID) AS MAX_STOP_TIME_DL,
MAX(NEW_EVENT_STOP_UL) OVER (PARTITION BY EQUIP_ID) AS MAX_STOP_TIME_UL,
SUM(NEW_DOWNLINK_VOLUME_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DOWNLINK_VOLUME,
SUM(NEW_UPLINK_VOLUME_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_UPLINK_VOLUME,
SUM(NEW_DATA_TRANSFER_TIME_DL_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DATA_TRANSFER_TIME_DL,
SUM(NEW_DATA_TRANSFER_TIME_UL_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DATA_TRANSFER_TIME_UL
from
(select 
case when TECHNOLOGY_ID = 101 then ''Cable''  
when TECHNOLOGY_ID = 102 then ''Copper''
when TECHNOLOGY_ID = 103 then ''Fiber_GFAST''
when TECHNOLOGY_ID = 104 then ''Fiber_E2E''
else TECHNOLOGY_DENORM end as TECHNOLOGY,
EQUIP_ID as EQUIP_ID,EQUIP_ID_SEQ as EQUIP_ID_SEQ,SUBSCRIBER_ID as 
SUBSCRIBER_ID,EQUIP_LATITUDE as EQUIP_LATITUDE,EQUIP_LONGITUDE as 
EQUIP_LONGITUDE,CLIENT_DEVICE as CLIENT_DEVICE,CLIENT_DEVICE_TYPE as 
CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS as CLIENT_DEVICE_OS,decode(
APPLICATION_NAME_DENORM,''Unknown'', INITCAP(nvl(APPLICATION_NAME,
''Others'')),APPLICATION_NAME_DENORM) as APPLICATION_NAME,
MONITORED_APP_FLAG as MONITORED_APP_FLAG,decode(APPLICATION_CATEGORY,
''Unknown'',''Browsing'',APPLICATION_CATEGORY ) as APPLICATION_CATEGORY,
decode(APP_CATEGORY_TYPE,''Unknown'',''BROWSING_TYPE'',APP_CATEGORY_TYPE 
) as APP_CATEGORY_TYPE,REGION as REGION,CITY_ID as CITY_ID,CITY as CITY,
AREA_ID as AREA_ID,AREA as AREA,ACCESS_NODE_ID as ACCESS_NODE_ID,
ACCESS_NODE_NAME as ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE as 
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE as ACCESS_NODE_LONGITUDE,
HUB_ID as HUB_ID,HUB_NAME as HUB_NAME,HUB_LATITUDE as HUB_LATITUDE,
HUB_LONGITUDE as HUB_LONGITUDE,EXCHANGE_ID as EXCHANGE_ID,EXCHANGE_NAME 
as EXCHANGE_NAME,EXCHANGE_LATITUDE as EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE as EXCHANGE_LONGITUDE,EQUIP_MODEL as EQUIP_MODEL,
EQUIP_VENDOR as EQUIP_VENDOR,DEVICE_CAPABILITY as DEVICE_CAPABILITY,
SUBS_TYPE as SUBS_TYPE,CUSTOMER_SEGMENTATION as CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY as CUSTOMER_SUBCATEGORY,GROUP_NAME as GROUP_NAME,
PARENT_GROUP_NAME as PARENT_GROUP_NAME,ASSOCIATION_NAME as 
ASSOCIATION_NAME,SPARE_US_BB_1 as SPARE_PS_BB_SEGG_1,SPARE_US_BB_2 as 
SPARE_PS_BB_SEGG_2,SPARE_US_BB_3 as SPARE_PS_BB_SEGG_3,SPARE_US_BB_4 as 
SPARE_PS_BB_SEGG_4,SPARE_US_BB_5 as SPARE_PS_BB_SEGG_5,SPARE_US_BB_6 as 
SPARE_PS_BB_SEGG_6,SPARE_US_BB_7 as SPARE_PS_BB_SEGG_7,SPARE_US_BB_8 as 
SPARE_PS_BB_SEGG_8,SPARE_US_BB_9 as SPARE_PS_BB_SEGG_9,SPARE_US_BB_10 as 
SPARE_PS_BB_SEGG_10,NULL as HTTP_METHOD_COUNT,NULL as HTTP_4XX_COUNT,
NULL as HTTP_5XX_COUNT,SUM(VISITS) as VISITS_APP,NULL as VISITS_BR,
NULL as VISITS_STR,SUM(BYTES_DL) as DOWNLINK_VOLUME_APP,SUM(BYTES_UL) as 
UPLINK_VOLUME_APP,NULL as DOWNLINK_VOLUME_BR,NULL as UPLINK_VOLUME_BR,
NULL as DOWNLINK_VOLUME_STR,NULL as UPLINK_VOLUME_STR,SUM(nvl(
TIME_DURATION,0)) as USAGE_TIME,NULL as STR_USAGE_TIME_AUDIO,NULL as 
DELTA_STALL_TIME_AUDIO,NULL as DELTA_STALL_TIME_AUDIO_C,NULL as 
DELTA_STALL_COUNT_AUDIO,NULL as DELTA_STALL_COUNT_AUDIO_C,NULL as 
TIME_TO_START_AUDIO,NULL as TIME_TO_START_AUDIO_C,NULL as 
QUALITY_TREND_AUDIO,NULL as QUALITY_TREND_AUDIO_C,NULL as 
STR_USAGE_TIME_VIDEO,NULL as DELTA_STALL_TIME_VIDEO,NULL as 
DELTA_STALL_TIME_VIDEO_C,NULL as DELTA_STALL_COUNT_VIDEO,NULL as 
DELTA_STALL_COUNT_VIDEO_C, NULL as TIME_TO_START_VIDEO,NULL as 
TIME_TO_START_VIDEO_C,NULL as QUALITY_TREND_VIDEO,NULL as 
QUALITY_TREND_VIDEO_C,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,DEVICE_EQUIP_ID,
DEVICE_SOFTWAREVERSION, NULL AS INITIAL_RESP_SUCCESS_STR, NULL AS 
INITIAL_RESP_SUCCESS_BR, SUM(INITIAL_APP_RESPONSE_SUCCESS) AS 
INITIAL_RESP_SUCCESS_APP, NULL AS INITIAL_RESP_ATTEMPTS_STR, NULL AS 
INITIAL_RESP_ATTEMPTS_BR, SUM(INITIAL_APP_RESPONSE_ATTEMPTS) AS 
INITIAL_RESP_ATTEMPTS_APP, NULL AS TCP_CONNECT_SUCCESS_STR, NULL AS 
TCP_CONNECT_SUCCESS_BR, SUM(TCP_CONNECT_SUCCESS) AS 
TCP_CONNECT_SUCCESS_APP, NULL AS TCP_CONNECT_ATTEMPTS_STR, NULL AS 
TCP_CONNECT_ATTEMPTS_BR, SUM(TCP_CONNECT_ATTEMPTS) AS 
TCP_CONNECT_ATTEMPTS_APP, NULL AS PACKETS_DL_STR, NULL AS PACKETS_DL_BR, 
SUM(PACKETS_DL) AS PACKETS_DL_APP, NULL AS PACKETS_UL_STR, NULL AS 
PACKETS_UL_BR, SUM(PACKETS_UL) AS PACKETS_UL_APP, NULL AS 
RETRANSMITTED_PACKETS_DL_STR, NULL AS RETRANSMITTED_PACKETS_DL_BR, 
SUM(RETRANSMITTED_PACKETS_DL) AS RETRANSMITTED_PACKETS_DL_APP, NULL AS 
RETRANSMITTED_PACKETS_UL_STR, NULL AS RETRANSMITTED_PACKETS_UL_BR, 
SUM(RETRANSMITTED_PACKETS_UL) AS RETRANSMITTED_PACKETS_UL_APP, NULL AS 
LOAD_TIME_BR, SUM(APPLICATION_LOAD_TIME) AS LOAD_TIME_APP, NULL AS 
LOAD_TIME_C_BR, SUM(CASE WHEN NVL(APPLICATION_LOAD_TIME_C,0) = 0 then 
case when APPLICATION_LOAD_TIME > 0 THEN 1 ELSE NULL END ELSE 
APPLICATION_LOAD_TIME_C end) AS LOAD_TIME_C_APP, NULL AS 
DATA_TRANSFER_TIME_DL_STR, NULL AS DATA_TRANSFER_TIME_DL_BR,case when 
nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL 
as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_DL,0)) then (nvl(
round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL as 
DOUBLE))) * 1000),0)) else SUM(DATA_TRANSFER_TIME_DL) end AS 
DATA_TRANSFER_TIME_DL_APP, NULL AS DATA_TRANSFER_TIME_UL_STR, NULL AS 
DATA_TRANSFER_TIME_UL_BR, case when nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) < sum(nvl(
DATA_TRANSFER_TIME_UL,0)) then nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) else SUM(
DATA_TRANSFER_TIME_UL) end AS DATA_TRANSFER_TIME_UL_APP, NULL AS 
RESPONSE_TIME_STR, NULL AS RESPONSE_TIME_BR, 
SUM(APPLICATION_RESPONSE_TIME) AS RESPONSE_TIME_APP, NULL AS 
RESPONSE_TIME_C_STR, NULL AS RESPONSE_TIME_C_BR, SUM(CASE WHEN NVL(
APPLICATION_RESPONSE_TIME_C,0) = 0 THEN CASE WHEN 
APPLICATION_RESPONSE_TIME > 0 THEN 1 ELSE NULL END ELSE 
APPLICATION_RESPONSE_TIME_C END) AS RESPONSE_TIME_C_APP, NULL AS 
RTT_CLIENT_STR, NULL AS RTT_CLIENT_BR, SUM(RTT_CLIENT) AS 
RTT_CLIENT_APP, NULL AS RTT_CLIENT_C_STR, NULL AS RTT_CLIENT_C_BR, 
SUM(CASE WHEN NVL(RTT_CLIENT_C,0) = 0 THEN CASE WHEN RTT_CLIENT > 0 THEN 
1 ELSE NULL END ELSE RTT_CLIENT_C END) AS RTT_CLIENT_C_APP, NULL AS 
RTT_SERVER_STR, NULL AS RTT_SERVER_BR, SUM(RTT_SERVER) AS 
RTT_SERVER_APP, NULL AS RTT_SERVER_C_STR, NULL AS RTT_SERVER_C_BR, 
SUM(CASE WHEN NVL(RTT_SERVER_C,0) = 0 THEN CASE WHEN RTT_SERVER > 0 THEN 
1 ELSE NULL END ELSE RTT_SERVER_C END) AS RTT_SERVER_C_APP, 
SUM(LOST_PACKETS_UL) AS LOST_PACKETS_UL_APP, SUM(LOST_PACKETS_DL) AS 
LOST_PACKETS_DL_APP, NULL AS LOST_PACKETS_UL_BR, NULL AS 
LOST_PACKETS_DL_BR, NULL AS LOST_PACKETS_UL_STR, NULL AS 
LOST_PACKETS_DL_STR, NULL AS HTTP_METHOD_COUNT_STR, NULL AS 
HTTP_FAILURE_COUNT_STR, MIN(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 
THEN EVENT_START_DL ELSE NULL END) AS NEW_EVENT_START_DL, MIN(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END) AS 
NEW_EVENT_START_UL, from_unixtime(CAST((nvl(case when unix_timestamp(
max(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_STOP_DL ELSE 
NULL END)) - unix_timestamp(min(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL 
> 0 THEN EVENT_START_DL ELSE NULL END)) < sum(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN DATA_TRANSFER_TIME_DL ELSE NULL 
END/1000) then unix_timestamp(max(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_STOP_DL ELSE NULL END)) - 
unix_timestamp(min(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN 
EVENT_START_DL ELSE NULL END)) else sum(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN DATA_TRANSFER_TIME_DL ELSE NULL 
END/1000) end,0) + unix_timestamp(MIN(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_START_DL ELSE NULL END))) 
AS BIGINT)) AS NEW_EVENT_STOP_DL, from_unixtime(CAST((nvl(case when 
unix_timestamp(max(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN 
EVENT_STOP_UL ELSE NULL END)) - unix_timestamp(min(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END)) < 
sum(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN 
DATA_TRANSFER_TIME_UL ELSE NULL END/1000) then unix_timestamp(max(CASE 
WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_STOP_UL ELSE NULL 
END)) - unix_timestamp(min(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 
THEN EVENT_START_UL ELSE NULL END)) else sum(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN DATA_TRANSFER_TIME_UL ELSE NULL 
END/1000) end,0) + unix_timestamp(MIN(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END))) 
AS BIGINT)) AS NEW_EVENT_STOP_UL, case when round((max(CAST(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_STOP_DL ELSE NULL END AS 
DOUBLE)) - min(CAST(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN 
EVENT_START_DL ELSE NULL END as DOUBLE))) * 1000) < sum(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN DATA_TRANSFER_TIME_DL ELSE NULL 
END) then round((max(CAST(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 
THEN EVENT_STOP_DL ELSE NULL END AS DOUBLE)) - min(CAST(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_START_DL ELSE NULL END as 
DOUBLE))) * 1000) else sum(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 
THEN DATA_TRANSFER_TIME_DL ELSE NULL END) end AS 
NEW_DATA_TRANSFER_TIME_DL_APP, case when round((max(CAST(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_STOP_UL ELSE NULL END AS 
DOUBLE)) - min(CAST(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN 
EVENT_START_UL ELSE NULL END as DOUBLE))) * 1000) < sum(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN DATA_TRANSFER_TIME_UL ELSE NULL 
END) then round((max(CAST(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 
THEN EVENT_STOP_UL ELSE NULL END AS DOUBLE)) - min(CAST(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END as 
DOUBLE))) * 1000) else sum(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 
THEN DATA_TRANSFER_TIME_UL ELSE NULL END) end AS 
NEW_DATA_TRANSFER_TIME_UL_APP, SUM(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN BYTES_DL ELSE NULL END) as 
NEW_DOWNLINK_VOLUME_APP, SUM(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 
0 THEN BYTES_UL ELSE NULL END) as NEW_UPLINK_VOLUME_APP from 
US_BB_APPLICATIONS_1 where US_BB_APPLICATIONS_1.dt >= ''111'' and 
US_BB_APPLICATIONS_1.dt < ''112'' and tz=''TZ1-Default'' 
group by case when TECHNOLOGY_ID = 101 then ''Cable''  
when TECHNOLOGY_ID = 102 then ''Copper''
when TECHNOLOGY_ID = 103 then ''Fiber_GFAST''
when TECHNOLOGY_ID = 104 then ''Fiber_E2E''
else TECHNOLOGY_DENORM end,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,
EQUIP_LATITUDE,EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS,decode(APPLICATION_NAME_DENORM,''Unknown'', INITCAP(
nvl(APPLICATION_NAME,''Others'')),APPLICATION_NAME_DENORM),
MONITORED_APP_FLAG,decode(APPLICATION_CATEGORY,''Unknown'',''Browsing'',
APPLICATION_CATEGORY ),decode(APP_CATEGORY_TYPE,''Unknown'',
''BROWSING_TYPE'',APP_CATEGORY_TYPE ),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION )temp1 )temp2
UNION ALL  select 
case when TECHNOLOGY_ID = 101 then ''Cable''  
when TECHNOLOGY_ID = 102 then ''Copper''
when TECHNOLOGY_ID = 103 then ''Fiber_GFAST''
when TECHNOLOGY_ID = 104 then ''Fiber_E2E''
else TECHNOLOGY_DENORM end as TECHNOLOGY,
EQUIP_ID as EQUIP_ID,EQUIP_ID_SEQ as EQUIP_ID_SEQ,SUBSCRIBER_ID as 
SUBSCRIBER_ID,EQUIP_LATITUDE as EQUIP_LATITUDE,EQUIP_LONGITUDE as 
EQUIP_LONGITUDE,CLIENT_DEVICE as CLIENT_DEVICE,CLIENT_DEVICE_TYPE as 
CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS as CLIENT_DEVICE_OS,decode(
APPLICATION_NAME_DENORM,''Unknown'',INITCAP(nvl(APPLICATION_NAME,
''Others'')),APPLICATION_NAME_DENORM) as APPLICATION_NAME,
MONITORED_APP_FLAG as MONITORED_APP_FLAG,decode(APPLICATION_CATEGORY,
''Unknown'',''Browsing'',APPLICATION_CATEGORY ) as APPLICATION_CATEGORY,
decode(APP_CATEGORY_TYPE,''Unknown'',''BROWSING_TYPE'',APP_CATEGORY_TYPE 
) as APP_CATEGORY_TYPE,REGION as REGION,CITY_ID as CITY_ID,CITY as CITY,
AREA_ID as AREA_ID,AREA as AREA,ACCESS_NODE_ID as ACCESS_NODE_ID,
ACCESS_NODE_NAME as ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE as 
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE as ACCESS_NODE_LONGITUDE,
HUB_ID as HUB_ID,HUB_NAME as HUB_NAME,HUB_LATITUDE as HUB_LATITUDE,
HUB_LONGITUDE as HUB_LONGITUDE,EXCHANGE_ID as EXCHANGE_ID,EXCHANGE_NAME 
as EXCHANGE_NAME,EXCHANGE_LATITUDE as EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE as EXCHANGE_LONGITUDE,EQUIP_MODEL as EQUIP_MODEL,
EQUIP_VENDOR as EQUIP_VENDOR,DEVICE_CAPABILITY as DEVICE_CAPABILITY,
SUBS_TYPE as SUBS_TYPE,CUSTOMER_SEGMENTATION as CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY as CUSTOMER_SUBCATEGORY,GROUP_NAME as GROUP_NAME,
PARENT_GROUP_NAME as PARENT_GROUP_NAME,ASSOCIATION_NAME as 
ASSOCIATION_NAME,SPARE_US_BB_1 as SPARE_PS_BB_SEGG_1,SPARE_US_BB_2 as 
SPARE_PS_BB_SEGG_2,SPARE_US_BB_3 as SPARE_PS_BB_SEGG_3,SPARE_US_BB_4 as 
SPARE_PS_BB_SEGG_4,SPARE_US_BB_5 as SPARE_PS_BB_SEGG_5,SPARE_US_BB_6 as 
SPARE_PS_BB_SEGG_6,SPARE_US_BB_7 as SPARE_PS_BB_SEGG_7,SPARE_US_BB_8 as 
SPARE_PS_BB_SEGG_8,SPARE_US_BB_9 as SPARE_PS_BB_SEGG_9,SPARE_US_BB_10 as 
SPARE_PS_BB_SEGG_10,SUM(nvl(HTTP_METHOD_COUNT,0)) as HTTP_METHOD_COUNT,
SUM(CASE WHEN CAUSE_CODE_GROUP = 0 OR (HTTP_CAUSE_CODE >399 AND 
HTTP_CAUSE_CODE <500) THEN nvl(HTTP_CAUSE_CODE_COUNT,0) ELSE 0 END) AS 
HTTP_4XX_COUNT,SUM(CASE WHEN CAUSE_CODE_GROUP = 1 OR (HTTP_CAUSE_CODE 
>499 AND HTTP_CAUSE_CODE <600) THEN nvl(HTTP_CAUSE_CODE_COUNT,0) ELSE 0 
END) AS HTTP_5XX_COUNT,NULL as VISITS_APP,SUM(VISITS) as VISITS_BR,
NULL as VISITS_STR,NULL as DOWNLINK_VOLUME_APP,NULL as 
UPLINK_VOLUME_APP,SUM(BYTES_DL) as DOWNLINK_VOLUME_BR, SUM(BYTES_UL) as 
UPLINK_VOLUME_BR,NULL as DOWNLINK_VOLUME_STR,NULL as UPLINK_VOLUME_STR,
NULL as USAGE_TIME,NULL as STR_USAGE_TIME_AUDIO,NULL as 
DELTA_STALL_TIME_AUDIO,NULL as DELTA_STALL_TIME_AUDIO_C,NULL as 
DELTA_STALL_COUNT_AUDIO,NULL as DELTA_STALL_COUNT_AUDIO_C,NULL as 
TIME_TO_START_AUDIO,NULL as TIME_TO_START_AUDIO_C,NULL as 
QUALITY_TREND_AUDIO,NULL as QUALITY_TREND_AUDIO_C,NULL as 
STR_USAGE_TIME_VIDEO,NULL as DELTA_STALL_TIME_VIDEO,NULL as 
DELTA_STALL_TIME_VIDEO_C,NULL as DELTA_STALL_COUNT_VIDEO,NULL as 
DELTA_STALL_COUNT_VIDEO_C, NULL as TIME_TO_START_VIDEO,NULL as 
TIME_TO_START_VIDEO_C,NULL as QUALITY_TREND_VIDEO,NULL as 
QUALITY_TREND_VIDEO_C,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,DEVICE_EQUIP_ID,
DEVICE_SOFTWAREVERSION,NULL AS INITIAL_RESP_SUCCESS_STR, 
SUM(INITIAL_WEBPAGE_RESP_SUCCESS) AS INITIAL_RESP_SUCCESS_BR, NULL AS 
INITIAL_RESP_SUCCESS_APP, NULL AS INITIAL_RESP_ATTEMPTS_STR, 
SUM(INITIAL_WEBPAGE_RESP_ATTEMPTS) AS INITIAL_RESP_ATTEMPTS_BR, NULL AS 
INITIAL_RESP_ATTEMPTS_APP, NULL AS TCP_CONNECT_SUCCESS_STR, 
SUM(TCP_CONNECT_SUCCESS) AS TCP_CONNECT_SUCCESS_BR, NULL AS 
TCP_CONNECT_SUCCESS_APP, NULL AS TCP_CONNECT_ATTEMPTS_STR, 
SUM(TCP_CONNECT_ATTEMPTS) AS TCP_CONNECT_ATTEMPTS_BR, NULL AS 
TCP_CONNECT_ATTEMPTS_APP, NULL AS PACKETS_DL_STR, SUM(PACKETS_DL) AS 
PACKETS_DL_BR, NULL AS PACKETS_DL_APP, NULL AS PACKETS_UL_STR, 
SUM(PACKETS_UL) AS PACKETS_UL_BR, NULL AS PACKETS_UL_APP, NULL AS 
RETRANSMITTED_PACKETS_DL_STR, SUM(RETRANSMITTED_PACKETS_DL) AS 
RETRANSMITTED_PACKETS_DL_BR, NULL AS RETRANSMITTED_PACKETS_DL_APP, 
NULL AS RETRANSMITTED_PACKETS_UL_STR, SUM(RETRANSMITTED_PACKETS_UL) AS 
RETRANSMITTED_PACKETS_UL_BR, NULL AS RETRANSMITTED_PACKETS_UL_APP, 
SUM(WEBPAGE_LOAD_TIME) AS LOAD_TIME_BR, NULL AS LOAD_TIME_APP, SUM(CASE 
WHEN NVL(WEBPAGE_LOAD_TIME_C,0) = 0 THEN CASE WHEN WEBPAGE_LOAD_TIME > 0 
THEN 1 ELSE NULL END ELSE WEBPAGE_LOAD_TIME_C END) AS LOAD_TIME_C_BR, 
NULL AS LOAD_TIME_C_APP, NULL AS DATA_TRANSFER_TIME_DL_STR,case when 
nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL 
as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_DL,0)) then (nvl(
round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL as 
DOUBLE))) * 1000),0)) else SUM(DATA_TRANSFER_TIME_DL) end AS 
DATA_TRANSFER_TIME_DL_BR, NULL AS DATA_TRANSFER_TIME_DL_APP, NULL AS 
DATA_TRANSFER_TIME_UL_STR,case when nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) < sum(nvl(
DATA_TRANSFER_TIME_UL,0)) then nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) else SUM(
DATA_TRANSFER_TIME_UL) end AS DATA_TRANSFER_TIME_UL_BR, NULL AS 
DATA_TRANSFER_TIME_UL_APP, NULL AS RESPONSE_TIME_STR, 
SUM(APPLICATION_RESPONSE_TIME) AS RESPONSE_TIME_BR, NULL AS 
RESPONSE_TIME_APP, NULL AS RESPONSE_TIME_C_STR, SUM(CASE WHEN nvl(
APPLICATION_RESPONSE_TIME_C,0) = 0 then case when 
APPLICATION_RESPONSE_TIME > 0 THEN 1 ELSE NULL END ELSE 
APPLICATION_RESPONSE_TIME_C END) AS RESPONSE_TIME_C_BR, NULL AS 
RESPONSE_TIME_C_APP, NULL AS RTT_CLIENT_STR, SUM(RTT_CLIENT) AS 
RTT_CLIENT_BR, NULL AS RTT_CLIENT_APP, NULL AS RTT_CLIENT_C_STR, 
SUM(CASE WHEN nvl(RTT_CLIENT_C,0) = 0 then case when RTT_CLIENT > 0 THEN 
1 ELSE NULL END ELSE RTT_CLIENT_C END) AS RTT_CLIENT_C_BR, NULL AS 
RTT_CLIENT_C_APP, NULL AS RTT_SERVER_STR, SUM(RTT_SERVER)  AS 
RTT_SERVER_BR, NULL AS RTT_SERVER_APP, NULL AS RTT_SERVER_C_STR, 
SUM(CASE WHEN nvl(RTT_SERVER_C,0) = 0 then case when RTT_SERVER > 0 THEN 
1 ELSE NULL END ELSE RTT_SERVER_C END) AS RTT_SERVER_C_BR, NULL AS 
RTT_SERVER_C_APP, NULL AS LOST_PACKETS_UL_APP, NULL AS 
LOST_PACKETS_DL_APP, SUM(LOST_PACKETS_UL) AS LOST_PACKETS_UL_BR, 
SUM(LOST_PACKETS_DL) AS LOST_PACKETS_DL_BR, NULL AS LOST_PACKETS_UL_STR, 
NULL AS LOST_PACKETS_DL_STR, NULL AS HTTP_METHOD_COUNT_STR, NULL AS 
HTTP_FAILURE_COUNT_STR, NULL AS EQUIP_VOLUME_UL, NULL AS 
EQUIP_VOLUME_DL, NULL AS EQUIP_DURATION_UL, NULL AS EQUIP_DURATION_DL  
from US_BB_BROWSING_1 where US_BB_BROWSING_1.dt >= ''111'' and 
US_BB_BROWSING_1.dt < ''112'' and tz=''TZ1-Default'' 
group by case when TECHNOLOGY_ID = 101 then ''Cable''  
when TECHNOLOGY_ID = 102 then ''Copper''
when TECHNOLOGY_ID = 103 then ''Fiber_GFAST''
when TECHNOLOGY_ID = 104 then ''Fiber_E2E''
else TECHNOLOGY_DENORM end,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,
EQUIP_LATITUDE,EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS,decode(APPLICATION_NAME_DENORM,''Unknown'',INITCAP(nvl(
APPLICATION_NAME,''Others'')),APPLICATION_NAME_DENORM),
MONITORED_APP_FLAG,decode(APPLICATION_CATEGORY,''Unknown'',''Browsing'',
APPLICATION_CATEGORY ),decode(APP_CATEGORY_TYPE,''Unknown'',
''BROWSING_TYPE'',APP_CATEGORY_TYPE ),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION
UNION ALL  select 
case when TECHNOLOGY_ID = 101 then ''Cable''  
when TECHNOLOGY_ID = 102 then ''Copper''
when TECHNOLOGY_ID = 103 then ''Fiber_GFAST''
when TECHNOLOGY_ID = 104 then ''Fiber_E2E''
else TECHNOLOGY_DENORM end as TECHNOLOGY,EQUIP_ID as EQUIP_ID,
EQUIP_ID_SEQ as EQUIP_ID_SEQ,SUBSCRIBER_ID as SUBSCRIBER_ID,
EQUIP_LATITUDE as EQUIP_LATITUDE,EQUIP_LONGITUDE as EQUIP_LONGITUDE,
CLIENT_DEVICE as CLIENT_DEVICE,CLIENT_DEVICE_TYPE as CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS as CLIENT_DEVICE_OS,decode(APPLICATION_NAME_DENORM,
''Unknown'',INITCAP(nvl(APPLICATION_NAME,''Others'')),
APPLICATION_NAME_DENORM) as APPLICATION_NAME,MONITORED_APP_FLAG as 
MONITORED_APP_FLAG,decode(APPLICATION_CATEGORY,''Unknown'',decode(
CONTENT_TYPE,''AUDIO'',''Audio Streaming'',''Video Streaming''),
APPLICATION_CATEGORY) as APPLICATION_CATEGORY,decode(APP_CATEGORY_TYPE,
''Unknown'',''STREAMING_TYPE'',APP_CATEGORY_TYPE) as APP_CATEGORY_TYPE,
REGION as REGION,CITY_ID as CITY_ID,CITY as CITY,AREA_ID as AREA_ID,
AREA as AREA,ACCESS_NODE_ID as ACCESS_NODE_ID,ACCESS_NODE_NAME as 
ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE as ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE as ACCESS_NODE_LONGITUDE,HUB_ID as HUB_ID,HUB_NAME 
as HUB_NAME,HUB_LATITUDE as HUB_LATITUDE,HUB_LONGITUDE as HUB_LONGITUDE,
EXCHANGE_ID as EXCHANGE_ID,EXCHANGE_NAME as EXCHANGE_NAME,
EXCHANGE_LATITUDE as EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE as 
EXCHANGE_LONGITUDE,EQUIP_MODEL as EQUIP_MODEL,EQUIP_VENDOR as 
EQUIP_VENDOR,DEVICE_CAPABILITY as DEVICE_CAPABILITY,SUBS_TYPE as 
SUBS_TYPE,CUSTOMER_SEGMENTATION as CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY as CUSTOMER_SUBCATEGORY,GROUP_NAME as GROUP_NAME,
PARENT_GROUP_NAME as PARENT_GROUP_NAME,ASSOCIATION_NAME as 
ASSOCIATION_NAME,SPARE_US_BB_1 as SPARE_PS_BB_SEGG_1,SPARE_US_BB_2 as 
SPARE_PS_BB_SEGG_2,SPARE_US_BB_3 as SPARE_PS_BB_SEGG_3,SPARE_US_BB_4 as 
SPARE_PS_BB_SEGG_4,SPARE_US_BB_5 as SPARE_PS_BB_SEGG_5,SPARE_US_BB_6 as 
SPARE_PS_BB_SEGG_6,SPARE_US_BB_7 as SPARE_PS_BB_SEGG_7,SPARE_US_BB_8 as 
SPARE_PS_BB_SEGG_8,SPARE_US_BB_9 as SPARE_PS_BB_SEGG_9,SPARE_US_BB_10 as 
SPARE_PS_BB_SEGG_10,NULL as HTTP_METHOD_COUNT,NULL as HTTP_4XX_COUNT,
NULL as HTTP_5XX_COUNT,NULL as VISITS_APP,NULL as VISITS_BR,SUM(VISITS) 
as VISITS_STR,NULL as DOWNLINK_VOLUME_APP,NULL as UPLINK_VOLUME_APP,
NULL as DOWNLINK_VOLUME_BR,NULL as UPLINK_VOLUME_BR,SUM(BYTES_DL) as 
DOWNLINK_VOLUME_STR, SUM(BYTES_UL) as UPLINK_VOLUME_STR,NULL as 
USAGE_TIME,SUM(CASE WHEN CONTENT_TYPE = ''AUDIO'' THEN TIME_DURATION 
ELSE 0 END) as STR_USAGE_TIME_AUDIO,SUM(CASE WHEN CONTENT_TYPE = 
''AUDIO'' THEN DELTA_STALL_TIME ELSE 0 END) as DELTA_STALL_TIME_AUDIO,
SUM(CASE WHEN CONTENT_TYPE = ''AUDIO'' AND NVL(DELTA_STALL_TIME_C,
0) = 0 THEN CASE WHEN DELTA_STALL_TIME >= 0 THEN 1 ELSE 0 END WHEN 
CONTENT_TYPE = ''AUDIO'' THEN DELTA_STALL_TIME_C ELSE 0 END) as 
DELTA_STALL_TIME_AUDIO_C,SUM(CASE WHEN CONTENT_TYPE = ''AUDIO'' THEN 
DELTA_STALL_COUNT ELSE 0 END) as DELTA_STALL_COUNT_AUDIO,SUM(CASE WHEN 
CONTENT_TYPE = ''AUDIO'' AND DELTA_STALL_COUNT >= 0 THEN  1 ELSE 0 END) 
as DELTA_STALL_COUNT_AUDIO_C,SUM(CASE WHEN CONTENT_TYPE = ''AUDIO'' THEN 
TIME_TO_START ELSE 0 END) as TIME_TO_START_AUDIO,SUM(CASE WHEN 
CONTENT_TYPE = ''AUDIO'' AND NVL(TIME_TO_START_C,0) = 0 THEN CASE WHEN 
TIME_TO_START > 0 THEN 1 ELSE 0 END WHEN CONTENT_TYPE = ''AUDIO'' THEN 
TIME_TO_START_C ELSE 0 END) as TIME_TO_START_AUDIO_C,SUM(CASE WHEN 
CONTENT_TYPE = ''AUDIO'' THEN nvl(UPSHIFT_COUNT,0) - nvl(
DOWNSHIFT_COUNT,0) ELSE 0 END) as QUALITY_TREND_AUDIO,SUM(CASE WHEN 
CONTENT_TYPE = ''AUDIO'' AND coalesce(UPSHIFT_COUNT,DOWNSHIFT_COUNT,
0) > 0 THEN 1 ELSE 0 END) as QUALITY_TREND_AUDIO_C,SUM(CASE WHEN 
CONTENT_TYPE = ''VIDEO'' THEN TIME_DURATION ELSE 0 END) as 
STR_USAGE_TIME_VIDEO,SUM(CASE WHEN CONTENT_TYPE = ''VIDEO'' THEN 
DELTA_STALL_TIME ELSE 0 END) as DELTA_STALL_TIME_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = ''VIDEO'' AND NVL(DELTA_STALL_TIME_C,0) = 0 THEN CASE 
WHEN DELTA_STALL_TIME >= 0 THEN 1 ELSE 0 END WHEN CONTENT_TYPE = 
''VIDEO'' THEN DELTA_STALL_TIME_C ELSE 0 END) as 
DELTA_STALL_TIME_VIDEO_C,SUM(CASE WHEN CONTENT_TYPE = ''VIDEO'' THEN 
DELTA_STALL_COUNT ELSE 0 END) as DELTA_STALL_COUNT_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = ''VIDEO'' AND DELTA_STALL_COUNT >= 0 THEN  1 ELSE 0 END) 
as DELTA_STALL_COUNT_VIDEO_C, SUM(CASE WHEN CONTENT_TYPE = ''VIDEO'' 
THEN TIME_TO_START ELSE 0 END) as TIME_TO_START_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = ''VIDEO'' AND NVL(TIME_TO_START_C,0) = 0 THEN CASE WHEN 
TIME_TO_START > 0 THEN 1 ELSE 0 END WHEN CONTENT_TYPE = ''VIDEO'' THEN 
TIME_TO_START_C ELSE 0 END) as TIME_TO_START_VIDEO_C,SUM(CASE WHEN 
CONTENT_TYPE = ''VIDEO'' THEN nvl(UPSHIFT_COUNT,0) - nvl(
DOWNSHIFT_COUNT,0) ELSE 0 END) as QUALITY_TREND_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = ''VIDEO'' AND coalesce(UPSHIFT_COUNT,DOWNSHIFT_COUNT,
0) > 0 THEN 1 ELSE 0 END) as QUALITY_TREND_VIDEO_C,SUB_TECHNOLOGY_ID,
SUB_TECHNOLOGY,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION,
SUM(INITIAL_HTTP_REPLY_DATA_MSG) AS INITIAL_RESP_SUCCESS_STR, NULL AS 
INITIAL_RESP_SUCCESS_BR, NULL AS INITIAL_RESP_SUCCESS_APP, 
SUM(INITIAL_HTTP_GET_MSG) AS INITIAL_RESP_ATTEMPTS_STR, NULL AS 
INITIAL_RESP_ATTEMPTS_BR, NULL AS INITIAL_RESP_ATTEMPTS_APP, 
SUM(TCP_CONNECT_SUCCESS) AS TCP_CONNECT_SUCCESS_STR, NULL AS 
TCP_CONNECT_SUCCESS_BR, NULL AS TCP_CONNECT_SUCCESS_APP, 
SUM(TCP_CONNECT_ATTEMPTS) AS TCP_CONNECT_ATTEMPTS_STR, NULL AS 
TCP_CONNECT_ATTEMPTS_BR, NULL AS TCP_CONNECT_ATTEMPTS_APP, 
SUM(PACKETS_DL) AS PACKETS_DL_STR, NULL AS PACKETS_DL_BR, NULL AS 
PACKETS_DL_APP, SUM(PACKETS_UL) AS PACKETS_UL_STR, NULL AS 
PACKETS_UL_BR, NULL AS PACKETS_UL_APP, SUM(RETRANSMITTED_PACKETS_DL) AS 
RETRANSMITTED_PACKETS_DL_STR, NULL AS RETRANSMITTED_PACKETS_DL_BR, 
NULL AS RETRANSMITTED_PACKETS_DL_APP, SUM(RETRANSMITTED_PACKETS_DL) AS 
RETRANSMITTED_PACKETS_UL_STR, NULL AS RETRANSMITTED_PACKETS_UL_BR, 
NULL AS RETRANSMITTED_PACKETS_UL_APP, NULL AS LOAD_TIME_BR, NULL AS 
LOAD_TIME_APP, NULL AS LOAD_TIME_C_BR, NULL AS LOAD_TIME_C_APP, 
case when nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(
EVENT_START_DL as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_DL,
0)) then (nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(
EVENT_START_DL as DOUBLE))) * 1000),0)) else SUM(DATA_TRANSFER_TIME_DL) 
end AS DATA_TRANSFER_TIME_DL_STR, NULL AS DATA_TRANSFER_TIME_DL_BR, 
NULL AS DATA_TRANSFER_TIME_DL_APP, case when nvl(round((max(CAST(
EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 
1000),0) < sum(nvl(DATA_TRANSFER_TIME_UL,0)) then nvl(round((max(CAST(
EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 
1000),0) else SUM(DATA_TRANSFER_TIME_UL) end AS 
DATA_TRANSFER_TIME_UL_STR, NULL AS DATA_TRANSFER_TIME_UL_BR, NULL AS 
DATA_TRANSFER_TIME_UL_APP, SUM(STREAMING_RESPONSE_TIME) AS 
RESPONSE_TIME_STR, NULL AS RESPONSE_TIME_BR, NULL AS RESPONSE_TIME_APP, 
SUM(CASE WHEN NVL(STREAMING_RESPONSE_TIME_C,0) = 0 THEN CASE WHEN 
STREAMING_RESPONSE_TIME > 0 THEN 1 ELSE NULL END ELSE 
STREAMING_RESPONSE_TIME_C END) AS RESPONSE_TIME_C_STR, NULL AS 
RESPONSE_TIME_C_BR, NULL AS RESPONSE_TIME_C_APP, SUM(RTT_CLIENT) AS 
RTT_CLIENT_STR, NULL AS RTT_CLIENT_BR, NULL AS RTT_CLIENT_APP, SUM(CASE 
WHEN NVL(RTT_CLIENT_C,0) = 0 THEN CASE WHEN RTT_CLIENT > 0 THEN 1 ELSE 
NULL END ELSE RTT_CLIENT_C END) AS RTT_CLIENT_C_STR, NULL AS 
RTT_CLIENT_C_BR, NULL AS RTT_CLIENT_C_APP, SUM(RTT_SERVER) AS 
RTT_SERVER_STR, NULL AS RTT_SERVER_BR, NULL AS RTT_SERVER_APP, SUM(CASE 
WHEN NVL(RTT_SERVER_C,0) = 0 THEN CASE WHEN RTT_SERVER > 0 THEN 1 ELSE 
NULL END ELSE RTT_SERVER_C END) AS RTT_SERVER_C_STR, NULL AS 
RTT_SERVER_C_BR, NULL AS RTT_SERVER_C_APP, NULL AS LOST_PACKETS_UL_APP, 
NULL AS LOST_PACKETS_DL_APP, NULL AS LOST_PACKETS_UL_BR, NULL AS 
LOST_PACKETS_DL_BR, SUM(LOST_PACKETS_UL) AS LOST_PACKETS_UL_STR, 
SUM(LOST_PACKETS_DL) AS LOST_PACKETS_DL_STR, SUM(HTTP_METHOD_COUNT) AS 
HTTP_METHOD_COUNT_STR, SUM(case when(CATEGORY_ID=7 OR HTTP_CAUSE_CODE 
BETWEEN 400 AND 599) then NVL(HTTP_CAUSE_CODE_COUNT,0) else 0 end) AS 
HTTP_FAILURE_COUNT_STR, NULL AS EQUIP_VOLUME_UL, NULL AS 
EQUIP_VOLUME_DL, NULL AS EQUIP_DURATION_UL, NULL AS EQUIP_DURATION_DL 
from US_BB_STREAMING_1 where US_BB_STREAMING_1.CONTENT_TYPE in (
''VIDEO'',''AUDIO'') and US_BB_STREAMING_1.dt >= ''111'' and 
US_BB_STREAMING_1.dt < ''112'' and tz=''TZ3-Default'' 
group by case when TECHNOLOGY_ID = 101 then ''Cable''  
when TECHNOLOGY_ID = 102 then ''Copper''
when TECHNOLOGY_ID = 103 then ''Fiber_GFAST''
when TECHNOLOGY_ID = 104 then ''Fiber_E2E''
else TECHNOLOGY_DENORM end,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,
EQUIP_LATITUDE,EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS,decode(APPLICATION_NAME_DENORM,''Unknown'',INITCAP(nvl(
APPLICATION_NAME,''Others'')),APPLICATION_NAME_DENORM),
MONITORED_APP_FLAG,decode(APPLICATION_CATEGORY,''Unknown'',decode(
CONTENT_TYPE,''AUDIO'',''Audio Streaming'',''Video Streaming''),
APPLICATION_CATEGORY),decode(APP_CATEGORY_TYPE,''Unknown'',
''STREAMING_TYPE'',APP_CATEGORY_TYPE),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION
) temp
group by TECHNOLOGY,nvl(EQUIP_ID,''NULL IN SOURCE''),EQUIP_ID_SEQ,
SUBSCRIBER_ID,decode(EQUIP_LATITUDE,-10,NULL,EQUIP_LATITUDE),decode(
EQUIP_LONGITUDE,-10,NULL,EQUIP_LONGITUDE),nvl(CLIENT_DEVICE,''NULL IN 
SOURCE''),nvl(CLIENT_DEVICE_TYPE,''NULL IN SOURCE''),
nvl(CLIENT_DEVICE_OS,''NULL IN SOURCE''),APPLICATION_NAME,decode(
MONITORED_APP_FLAG,-10,0,nvl(MONITORED_APP_FLAG,0)),
APPLICATION_CATEGORY, APP_CATEGORY_TYPE,REGION,CITY_ID,CITY,AREA_ID,
AREA,ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,nvl(SPARE_PS_BB_SEGG_1,''Unknown''), 
nvl(SPARE_PS_BB_SEGG_2,''Unknown''), nvl(SPARE_PS_BB_SEGG_3,
''Unknown''),nvl(SPARE_PS_BB_SEGG_4,''Unknown''), 
nvl(SPARE_PS_BB_SEGG_5,''Unknown''), nvl(SPARE_PS_BB_SEGG_6,
''Unknown''), nvl(SPARE_PS_BB_SEGG_7,''Unknown''),
nvl(SPARE_PS_BB_SEGG_8,''Unknown''), nvl(SPARE_PS_BB_SEGG_9,
''Unknown''), nvl(SPARE_PS_BB_SEGG_10,''Unknown''),SUB_TECHNOLOGY_ID,
SUB_TECHNOLOGY,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION"""  # noqa E501

    def test_query_1(self):
        expected_query = """select nvl(us_bb_dns_1.DNS_SERVER_IP,'NULL IN SOURCE') AS dns_server_ip, 
(case when us_bb_dns_1.DNS_SERVER_TYPE = 1 then 'Remote'  when 
us_bb_dns_1.DNS_SERVER_TYPE = 2 then 'Local' else nvl(
es_dns.dns_server_type,'Unknown') end),nvl(es_dns.MONITORED_DNS_FLAG,
0) AS MONITORED_DNS_FLAG,nvl(es_equip.TECHNOLOGY,'Unknown') AS 
technology,nvl(es_equip.SUB_TECHNOLOGY_ID,-10) AS sub_technology_id,
nvl(es_equip.SUB_TECHNOLOGY,'Unknown') AS sub_technology,SUM(nvl(
QUERY_COUNT,0)) AS query_count,SUM(nvl(QUERY_ANSWERED,0)) AS 
query_answered,SUM(nvl(QUERY_ZERO_ANSWERED,0)) AS query_zero_answered,
SUM(nvl(QUERY_UNANSWERED,0)) AS query_unanswered,SUM(CASE WHEN 
es_response.CATEGORY_ID=7 then nvl(QUERY_COUNT,0) ELSE 0 END) AS 
query_negative_answered,round(SUM(nvl(RESPONSE_DELAY,0)),2) AS 
response_delay,SUM(nvl(RESPONSE_DELAY_COUNT,0)) AS response_delay_count,
round(MIN(nvl(MIN_RESPONSE_DELAY,0)),2) AS min_response_delay,round(MAX(
nvl(MAX_RESPONSE_DELAY,0)),2) AS max_response_delay from us1_bb_dns_1 us_bb_dns_1 
left outer join ES_RESPONSE_CODE_1 es_response on nvl(
US_BB_DNS_1.RESPONSE_CODE,'-1') = ES_RESPONSE.RESPONSE_CODE AND (case 
when US_BB_DNS_1.reply_code is not NULL then 107 else -1 end) = 
ES_RESPONSE.protocol_id  left outer join ES_DNS_1 es_dns on nvl(
us_bb_dns_1.DNS_SERVER_IP,'-1') = es_dns.DNS_SERVER_IP left outer join 
ES_FL_EQUIPMENT_DENORM_1 es_equip ON (nvl(us_bb_dns_1.EQUIP_ID,'-1') = 
es_equip.EQUIP_ID)
WHERE 
tz='Default' group by nvl(es_dns.MONITORED_DNS_FLAG,0),
nvl(us_bb_dns_1.DNS_SERVER_IP,'NULL IN SOURCE'), (case when 
us_bb_dns_1.DNS_SERVER_TYPE = 1 then 'Remote'  when 
us_bb_dns_1.DNS_SERVER_TYPE = 2 then 'Local' else nvl(
es_dns.dns_server_type,'Unknown') end),nvl(es_equip.TECHNOLOGY,
'Unknown'),nvl(es_equip.SUB_TECHNOLOGY_ID,-10),
nvl(es_equip.SUB_TECHNOLOGY,'Unknown')"""  # noqa E501
        query = self.remove_quotes(TestQueryParser.INPUT_QUERY_1)
        qp = QueryParser(self.parsed_query(query))
        actual_query = qp.query
        self.assertEqual(expected_query, actual_query)

    def test_query_2(self):
        expected_query = """select TECHNOLOGY AS TECHNOLOGY,
EQUIP_ID AS EQUIP_ID,EQUIP_ID_SEQ AS EQUIP_ID_SEQ,SUBSCRIBER_ID AS 
SUBSCRIBER_ID,EQUIP_LATITUDE AS EQUIP_LATITUDE,EQUIP_LONGITUDE AS 
EQUIP_LONGITUDE,CLIENT_DEVICE AS CLIENT_DEVICE,CLIENT_DEVICE_TYPE AS 
CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS AS CLIENT_DEVICE_OS,CONTENT_TYPE AS 
CONTENT_TYPE,CONTENT_PROVIDER AS CONTENT_PROVIDER,MEDIA_CONTAINER AS 
MEDIA_CONTAINER,CDN AS CDN,VIDEO_CODEC AS VIDEO_CODEC,AUDIO_CODEC AS 
AUDIO_CODEC,REGION AS REGION,CITY_ID AS CITY_ID,CITY AS CITY,AREA_ID AS 
AREA_ID,AREA AS AREA,ACCESS_NODE_ID AS ACCESS_NODE_ID,ACCESS_NODE_NAME 
AS ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE AS ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE AS ACCESS_NODE_LONGITUDE,HUB_ID AS HUB_ID,HUB_NAME 
AS HUB_NAME,HUB_LATITUDE AS HUB_LATITUDE,HUB_LONGITUDE AS HUB_LONGITUDE,
EXCHANGE_ID AS EXCHANGE_ID,EXCHANGE_NAME AS EXCHANGE_NAME,
EXCHANGE_LATITUDE AS EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE AS 
EXCHANGE_LONGITUDE,EQUIP_MODEL AS EQUIP_MODEL,EQUIP_VENDOR AS 
EQUIP_VENDOR,DEVICE_CAPABILITY AS DEVICE_CAPABILITY,SUBS_TYPE AS 
SUBS_TYPE,CUSTOMER_SEGMENTATION AS CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY AS CUSTOMER_SUBCATEGORY,GROUP_NAME AS GROUP_NAME,
PARENT_GROUP_NAME AS PARENT_GROUP_NAME,ASSOCIATION_NAME AS 
ASSOCIATION_NAME,SPARE_PS_BB_STR_SEGG_1 AS SPARE_PS_BB_STR_SEGG_1,
SPARE_PS_BB_STR_SEGG_2 AS SPARE_PS_BB_STR_SEGG_2,SPARE_PS_BB_STR_SEGG_3 
AS SPARE_PS_BB_STR_SEGG_3,SPARE_PS_BB_STR_SEGG_4 AS 
SPARE_PS_BB_STR_SEGG_4,SPARE_PS_BB_STR_SEGG_5 AS SPARE_PS_BB_STR_SEGG_5,
SPARE_PS_BB_STR_SEGG_6 AS SPARE_PS_BB_STR_SEGG_6,SPARE_PS_BB_STR_SEGG_7 
AS SPARE_PS_BB_STR_SEGG_7,SPARE_PS_BB_STR_SEGG_8 AS 
SPARE_PS_BB_STR_SEGG_8,SPARE_PS_BB_STR_SEGG_9 AS SPARE_PS_BB_STR_SEGG_9,
SPARE_PS_BB_STR_SEGG_10 AS SPARE_PS_BB_STR_SEGG_10,VIDEO_CODEC_BITRATE 
AS VIDEO_CODEC_BITRATE,AUDIO_CODEC_BITRATE AS AUDIO_CODEC_BITRATE,
VISITS AS VISITS,UPLINK_VOLUME AS UPLINK_VOLUME,DOWNLINK_VOLUME AS 
DOWNLINK_VOLUME,USAGE_TIME AS USAGE_TIME,DELTA_STALL_TIME AS 
DELTA_STALL_TIME,DELTA_STALL_TIME_C AS DELTA_STALL_TIME_C,
DELTA_STALL_COUNT AS DELTA_STALL_COUNT,DELTA_STALL_COUNT_C AS 
DELTA_STALL_COUNT_C,TIME_TO_START AS TIME_TO_START,TIME_TO_START_C AS 
TIME_TO_START_C,QUALITY_TREND AS QUALITY_TREND,QUALITY_TREND_C AS 
QUALITY_TREND_C,NVL(DATA_TRANSFER_TIME_DL,0) AS DATA_TRANSFER_TIME_DL,
NVL(DATA_TRANSFER_TIME_UL,0) AS DATA_TRANSFER_TIME_UL,PACKETS_DL AS 
PACKETS_DL,PACKETS_UL AS PACKETS_UL,LOST_PACKETS AS LOST_PACKETS,
RETRANSMITTED_PACKETS_DL AS RETRANSMITTED_PACKETS_DL,
RETRANSMITTED_PACKETS_UL AS RETRANSMITTED_PACKETS_UL,PACKET_JITTER_DL AS 
PACKET_JITTER_DL,PACKET_JITTER_UL AS PACKET_JITTER_UL,RX_MOS AS RX_MOS,
TX_MOS AS TX_MOS,FRAME_RATE AS FRAME_RATE,SUB_TECHNOLOGY_ID AS 
SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY AS SUB_TECHNOLOGY,STR_RTT_CLIENT AS 
STR_RTT_CLIENT,STR_RTT_CLIENT_C AS STR_RTT_CLIENT_C,STR_RTT_SERVER AS 
STR_RTT_SERVER,STR_RTT_SERVER_C AS STR_RTT_SERVER_C,
STR_TCP_CONNECT_SUCCESS AS STR_TCP_CONNECT_SUCCESS,
STR_TCP_CONNECT_ATTEMPTS AS STR_TCP_CONNECT_ATTEMPTS,
INITIAL_HTTP_REPLY_DATA_MSG AS INITIAL_HTTP_REPLY_DATA_MSG,
INITIAL_HTTP_GET_MSG AS INITIAL_HTTP_GET_MSG,STREAMING_RESPONSE_TIME AS 
STREAMING_RESPONSE_TIME,STREAMING_RESPONSE_TIME_C AS 
STREAMING_RESPONSE_TIME_C,DEVICE_EQUIP_ID AS DEVICE_EQUIP_ID,
DEVICE_SOFTWAREVERSION AS DEVICE_SOFTWAREVERSION,PACKET_JITTER_DL_C AS 
PACKET_JITTER_DL_C,PACKET_JITTER_UL_C AS PACKET_JITTER_UL_C,RX_MOS_C AS 
RX_MOS_C,TX_MOS_C AS TX_MOS_C,FRAME_RATE_C AS FRAME_RATE_C,
STR_LOST_PACKETS_UL AS STR_LOST_PACKETS_UL,STR_LOST_PACKETS_DL AS 
STR_LOST_PACKETS_DL,HTTP_METHOD_COUNT AS HTTP_METHOD_COUNT,
HTTP_FAILURE_COUNT AS HTTP_FAILURE_COUNT,case when ROW_NUMBER=1 then 
SUM_UPLINK_VOLUME else NULL end AS EQUIP_VOLUME_UL,case when 
ROW_NUMBER=1 then SUM_DOWNLINK_VOLUME else NULL end AS EQUIP_VOLUME_DL,
round(case when ROW_NUMBER=1 then (case when (unix_timestamp(
MAX_STOP_TIME_UL)-unix_timestamp(MIN_START_TIME_UL)) < 
SUM_DATA_TRANSFER_TIME_UL/1000 then (unix_timestamp(
MAX_STOP_TIME_UL)-unix_timestamp(MIN_START_TIME_UL)) else 
SUM_DATA_TRANSFER_TIME_UL/1000 end) else NULL end,2) AS 
EQUIP_DURATION_UL,round(case when ROW_NUMBER=1 then (case when (
unix_timestamp(MAX_STOP_TIME_DL)-unix_timestamp(MIN_START_TIME_DL)) < 
SUM_DATA_TRANSFER_TIME_DL/1000 then (unix_timestamp(
MAX_STOP_TIME_DL)-unix_timestamp(MIN_START_TIME_DL)) else 
SUM_DATA_TRANSFER_TIME_DL/1000 end) else NULL end,2) AS 
EQUIP_DURATION_DL from( 
select *, ROW_NUMBER() OVER (PARTITION BY EQUIP_ID order by EQUIP_ID) AS 
ROW_NUMBER,MAX(NEW_EVENT_STOP_UL) OVER (PARTITION BY EQUIP_ID) AS 
MAX_STOP_TIME_UL,MAX(NEW_EVENT_STOP_DL) OVER (PARTITION BY EQUIP_ID) AS 
MAX_STOP_TIME_DL,MIN(NEW_EVENT_START_UL) OVER (PARTITION BY EQUIP_ID) AS 
MIN_START_TIME_UL,MIN(NEW_EVENT_START_DL) OVER (PARTITION BY EQUIP_ID) 
AS MIN_START_TIME_DL,SUM(NEW_UPLINK_VOLUME) OVER (PARTITION BY EQUIP_ID) 
AS SUM_UPLINK_VOLUME,SUM(NEW_DOWNLINK_VOLUME) OVER (PARTITION BY 
EQUIP_ID) AS SUM_DOWNLINK_VOLUME,SUM(NEW_DATA_TRANSFER_TIME_UL) OVER (
PARTITION BY EQUIP_ID) AS SUM_DATA_TRANSFER_TIME_UL,
SUM(NEW_DATA_TRANSFER_TIME_DL) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DATA_TRANSFER_TIME_DL from (
select  
case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end AS TECHNOLOGY,nvl(EQUIP_ID,'NULL IN SOURCE') 
AS EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,custom_decode(EQUIP_LATITUDE,-10,NULL,
EQUIP_LATITUDE) AS EQUIP_LATITUDE,custom_decode(EQUIP_LONGITUDE,-10,NULL,
EQUIP_LONGITUDE) AS EQUIP_LONGITUDE,nvl(CLIENT_DEVICE,'NULL IN SOURCE') 
AS CLIENT_DEVICE,nvl(CLIENT_DEVICE_TYPE,'NULL IN SOURCE') AS 
CLIENT_DEVICE_TYPE,nvl(CLIENT_DEVICE_OS,'NULL IN SOURCE') AS 
CLIENT_DEVICE_OS,nvl(CONTENT_TYPE,'NULL IN SOURCE') AS CONTENT_TYPE,
nvl(CONTENT_PROVIDER,'NULL IN SOURCE') AS CONTENT_PROVIDER,
nvl(MEDIA_CONTAINER,'NULL IN SOURCE') AS MEDIA_CONTAINER,nvl(CDN,
'NULL IN SOURCE') AS CDN,nvl(VIDEO_CODEC,'NULL IN SOURCE') AS 
VIDEO_CODEC,nvl(AUDIO_CODEC,'NULL IN SOURCE') AS AUDIO_CODEC,REGION,
CITY_ID,CITY,AREA_ID,AREA,ACCESS_NODE_ID,ACCESS_NODE_NAME,
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,
HUB_LONGITUDE,EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE,EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1 AS SPARE_PS_BB_STR_SEGG_1,SPARE_US_BB_2 
AS SPARE_PS_BB_STR_SEGG_2,SPARE_US_BB_3 AS SPARE_PS_BB_STR_SEGG_3,
SPARE_US_BB_4 AS SPARE_PS_BB_STR_SEGG_4,SPARE_US_BB_5 AS 
SPARE_PS_BB_STR_SEGG_5,SPARE_US_BB_6 AS SPARE_PS_BB_STR_SEGG_6,
SPARE_US_BB_7 AS SPARE_PS_BB_STR_SEGG_7,SPARE_US_BB_8 AS 
SPARE_PS_BB_STR_SEGG_8,SPARE_US_BB_9 AS SPARE_PS_BB_STR_SEGG_9,
SPARE_US_BB_10 AS SPARE_PS_BB_STR_SEGG_10,round("null",2) AS 
VIDEO_CODEC_BITRATE,round("null",2) AS AUDIO_CODEC_BITRATE,SUM(nvl(
VISITS,0)) AS VISITS,SUM(NVL(bytes_ul,0)) AS UPLINK_VOLUME,SUM(NVL(
BYTES_DL,0)) AS DOWNLINK_VOLUME,SUM(nvl(TIME_DURATION,0)) AS USAGE_TIME,
SUM(NVL(DELTA_STALL_TIME,0)) AS DELTA_STALL_TIME,SUM(CASE WHEN NVL(
DELTA_STALL_TIME_C,0) = 0 THEN CASE WHEN DELTA_STALL_TIME >= 0 THEN 1 
ELSE 0 END ELSE DELTA_STALL_TIME_C END) AS DELTA_STALL_TIME_C,SUM(NVL(
DELTA_STALL_COUNT,0)) AS DELTA_STALL_COUNT,SUM(CASE WHEN 
DELTA_STALL_COUNT>=0 THEN 1 ELSE 0 END) AS DELTA_STALL_COUNT_C,
round(SUM(NVL(TIME_TO_START,0)),2) AS TIME_TO_START,SUM(CASE WHEN NVL(
TIME_TO_START_C,0) = 0 THEN CASE WHEN TIME_TO_START > 0 THEN 1 ELSE 0 
END ELSE TIME_TO_START_C END) AS TIME_TO_START_C,SUM(NVL(UPSHIFT_COUNT,
0) - NVL(DOWNSHIFT_COUNT,0)) AS QUALITY_TREND,SUM(CASE WHEN coalesce(
UPSHIFT_COUNT,DOWNSHIFT_COUNT,0) > 0 THEN 1 ELSE 0 END) AS 
QUALITY_TREND_C,case when nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) 
- min(CAST(EVENT_START_DL as DOUBLE))) * 1000),0) < sum(nvl(
DATA_TRANSFER_TIME_DL,0)) then (nvl(round((max(CAST(EVENT_STOP_DL AS 
DOUBLE)) - min(CAST(EVENT_START_DL as DOUBLE))) * 1000),0)) else sum(
nvl(DATA_TRANSFER_TIME_DL,0)) end AS DATA_TRANSFER_TIME_DL,case when 
nvl(round((max(CAST(EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL 
as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_UL,0)) then nvl(
round((max(CAST(EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL as 
DOUBLE))) * 1000),0) else sum(nvl(DATA_TRANSFER_TIME_UL,0)) end AS 
DATA_TRANSFER_TIME_UL,SUM(NVL(PACKETS_DL,0)) AS PACKETS_DL,SUM(NVL(
PACKETS_UL,0)) AS PACKETS_UL,SUM(NVL(LOST_PACKETS,0)) AS LOST_PACKETS,
SUM(NVL(RETRANSMITTED_PACKETS_DL,0)) AS RETRANSMITTED_PACKETS_DL,
SUM(NVL(RETRANSMITTED_PACKETS_UL,0)) AS RETRANSMITTED_PACKETS_UL,
SUM(NVL(PACKET_JITTER_DL,0)) AS PACKET_JITTER_DL,SUM(NVL(
PACKET_JITTER_UL,0)) AS PACKET_JITTER_UL,round(SUM(NVL(RX_MOS,0)),
2) AS RX_MOS,round(SUM(NVL(TX_MOS,0)),2) AS TX_MOS,SUM(NVL(FRAME_RATE,
0)) AS FRAME_RATE,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,round(SUM(nvl(
RTT_CLIENT,0.0)),2) AS STR_RTT_CLIENT,SUM(CASE WHEN NVL(RTT_CLIENT_C,
0) = 0 THEN CASE WHEN RTT_CLIENT > 0 THEN 1 ELSE 0 END ELSE RTT_CLIENT_C 
END) AS STR_RTT_CLIENT_C,round(SUM(nvl(RTT_SERVER,0.0)),2) AS 
STR_RTT_SERVER,SUM(CASE WHEN NVL(RTT_SERVER_C,0) = 0 THEN CASE WHEN 
RTT_SERVER > 0 THEN 1 ELSE 0 END ELSE RTT_SERVER_C END) AS 
STR_RTT_SERVER_C,SUM(nvl(TCP_CONNECT_SUCCESS,0)) AS 
STR_TCP_CONNECT_SUCCESS,SUM(nvl(TCP_CONNECT_ATTEMPTS,0)) AS 
STR_TCP_CONNECT_ATTEMPTS,SUM(nvl(INITIAL_HTTP_REPLY_DATA_MSG,0)) AS 
INITIAL_HTTP_REPLY_DATA_MSG,SUM(nvl(INITIAL_HTTP_GET_MSG,0)) AS 
INITIAL_HTTP_GET_MSG,round(SUM(nvl(STREAMING_RESPONSE_TIME,0)),
2) AS STREAMING_RESPONSE_TIME,SUM(CASE WHEN NVL(
STREAMING_RESPONSE_TIME_C,0) = 0 THEN CASE WHEN STREAMING_RESPONSE_TIME 
>  0 THEN 1 ELSE 0 END ELSE STREAMING_RESPONSE_TIME_C END) AS 
STREAMING_RESPONSE_TIME_C,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION,
SUM(CASE WHEN NVL(PACKET_JITTER_DL_C,0) = 0 THEN CASE WHEN 
PACKET_JITTER_DL >= 0 THEN 1 ELSE 0 END ELSE PACKET_JITTER_DL_C END) AS 
PACKET_JITTER_DL_C,SUM(CASE WHEN NVL(PACKET_JITTER_UL_C,0) = 0 THEN CASE 
WHEN PACKET_JITTER_UL >= 0 THEN 1 ELSE 0 END ELSE PACKET_JITTER_UL_C 
END) AS PACKET_JITTER_UL_C,SUM(case when RX_MOS > 0 then 1 else 0 end) 
AS RX_MOS_C,SUM(case when TX_MOS > 0 then 1 else 0 end) AS TX_MOS_C,
SUM(case when FRAME_RATE > 0 then 1 else 0 end) AS FRAME_RATE_C,SUM(NVL(
LOST_PACKETS_UL,0)) AS STR_LOST_PACKETS_UL,SUM(NVL(LOST_PACKETS_DL,
0)) AS STR_LOST_PACKETS_DL,SUM(NVL(HTTP_METHOD_COUNT,0)) AS 
HTTP_METHOD_COUNT,SUM(case when (CATEGORY_ID=7 OR HTTP_CAUSE_CODE 
BETWEEN 400 AND 599) then NVL(HTTP_CAUSE_CODE_COUNT,0) else 0 end) AS 
HTTP_FAILURE_COUNT,MIN(case when bytes_ul/data_transfer_time_ul>0 then 
EVENT_START_UL else NULL end) AS NEW_EVENT_START_UL,MIN(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end) AS 
NEW_EVENT_START_DL,from_unixtime(CAST(NVL(case when unix_timestamp(max(
case when bytes_ul/data_transfer_time_ul>0 then EVENT_STOP_UL else NULL 
end)) - unix_timestamp(min(case when bytes_ul/data_transfer_time_ul>0 
then EVENT_START_UL else NULL end)) < sum(case when 
bytes_ul/data_transfer_time_ul>0 then DATA_TRANSFER_TIME_UL/1000 else 
NULL end) then unix_timestamp(max(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_STOP_UL else NULL end)) - 
unix_timestamp(min(case when bytes_ul/data_transfer_time_ul>0 then 
EVENT_START_UL else NULL end)) else sum(case when 
bytes_ul/data_transfer_time_ul>0 then DATA_TRANSFER_TIME_UL/1000 else 
NULL end) end,0)+(unix_timestamp(min(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_START_UL else NULL end))) AS 
BIGINT)) AS NEW_EVENT_STOP_UL,from_unixtime(CAST(NVL(case when 
unix_timestamp(max(case when bytes_dl/data_transfer_time_dl>0 then 
EVENT_STOP_DL else NULL end)) - unix_timestamp(min(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end)) < 
sum(case when bytes_dl/data_transfer_time_dl>0 then 
DATA_TRANSFER_TIME_DL/1000 else NULL end) then unix_timestamp(max(case 
when bytes_dl/data_transfer_time_dl>0 then EVENT_STOP_DL else NULL end)) 
- unix_timestamp(min(case when bytes_dl/data_transfer_time_dl>0 then 
EVENT_START_DL else NULL end)) else sum(case when 
bytes_dl/data_transfer_time_dl>0 then DATA_TRANSFER_TIME_DL/1000 else 
NULL end) end,0)+(unix_timestamp(min(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end))) AS 
BIGINT)) AS NEW_EVENT_STOP_DL, case when round((max(CAST(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_STOP_DL else NULL end AS 
DOUBLE)) - min(CAST(case when bytes_dl/data_transfer_time_dl>0 then 
EVENT_START_DL else NULL end as DOUBLE))) * 1000) < sum(case when 
bytes_dl/data_transfer_time_dl>0 then DATA_TRANSFER_TIME_DL else NULL 
end) then (round((max(CAST(case when bytes_dl/data_transfer_time_dl>0 
then EVENT_STOP_DL else NULL end AS DOUBLE)) - min(CAST(case when 
bytes_dl/data_transfer_time_dl>0 then EVENT_START_DL else NULL end as 
DOUBLE))) * 1000)) else sum(case when bytes_dl/data_transfer_time_dl>0 
then DATA_TRANSFER_TIME_DL else NULL end) end AS 
NEW_DATA_TRANSFER_TIME_DL, case when round((max(CAST(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_STOP_UL else NULL end AS 
DOUBLE)) - min(CAST(case when bytes_ul/data_transfer_time_ul>0 then 
EVENT_START_UL else NULL end as DOUBLE))) * 1000) < sum(case when 
bytes_ul/data_transfer_time_ul>0 then DATA_TRANSFER_TIME_UL else NULL 
end) then (round((max(CAST(case when bytes_ul/data_transfer_time_ul>0 
then EVENT_STOP_UL else NULL end AS DOUBLE)) - min(CAST(case when 
bytes_ul/data_transfer_time_ul>0 then EVENT_START_UL else NULL end as 
DOUBLE))) * 1000)) else sum(case when bytes_ul/data_transfer_time_ul>0 
then DATA_TRANSFER_TIME_UL else NULL end) end AS 
NEW_DATA_TRANSFER_TIME_UL,SUM(case when bytes_ul/data_transfer_time_ul>0 
then BYTES_UL else NULL end) AS NEW_UPLINK_VOLUME,SUM(case when 
bytes_dl/data_transfer_time_dl>0 then BYTES_DL else NULL end) AS 
NEW_DOWNLINK_VOLUME from US1_BB_STREAMING_1 US_BB_STREAMING_1 WHERE ((CONTENT_TYPE IN ('VIDEO',
'AUDIO')))
  group by case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end,nvl(EQUIP_ID,'NULL IN SOURCE'),EQUIP_ID_SEQ,
SUBSCRIBER_ID,custom_decode(EQUIP_LATITUDE,-10,NULL,EQUIP_LATITUDE),custom_decode(
EQUIP_LONGITUDE,-10,NULL,EQUIP_LONGITUDE),nvl(CLIENT_DEVICE,'NULL IN 
SOURCE'),nvl(CLIENT_DEVICE_TYPE,'NULL IN SOURCE'),nvl(CLIENT_DEVICE_OS,
'NULL IN SOURCE'),nvl(CONTENT_TYPE,'NULL IN SOURCE'),
nvl(CONTENT_PROVIDER,'NULL IN SOURCE'),nvl(MEDIA_CONTAINER,'NULL IN 
SOURCE'),nvl(CDN,'NULL IN SOURCE'),nvl(VIDEO_CODEC,'NULL IN SOURCE'),
nvl(AUDIO_CODEC,'NULL IN SOURCE'),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION ) temp ) temp2"""  # noqa E501
        query = self.remove_quotes(TestQueryParser.INPUT_QUERY_2)
        qp = QueryParser(self.parsed_query(query))
        actual_query = qp.query
        self.assertEqual(expected_query, actual_query)

    def test_query_3(self):
        expected_query = """select TECHNOLOGY,nvl(EQUIP_ID,
'NULL IN SOURCE') EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,custom_decode(
EQUIP_LATITUDE,-10,NULL,EQUIP_LATITUDE) EQUIP_LATITUDE, custom_decode(
EQUIP_LONGITUDE,-10,NULL,EQUIP_LONGITUDE) EQUIP_LONGITUDE,
nvl(CLIENT_DEVICE,'NULL IN SOURCE') CLIENT_DEVICE,
nvl(CLIENT_DEVICE_TYPE,'NULL IN SOURCE') CLIENT_DEVICE_TYPE,
nvl(CLIENT_DEVICE_OS,'NULL IN SOURCE') CLIENT_DEVICE_OS,
APPLICATION_NAME,custom_decode(MONITORED_APP_FLAG,-10,0,nvl(MONITORED_APP_FLAG,
0)) MONITORED_APP_FLAG, APPLICATION_CATEGORY,  APP_CATEGORY_TYPE, 
REGION,CITY_ID,CITY,AREA_ID,AREA,ACCESS_NODE_ID,ACCESS_NODE_NAME,
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE, HUB_ID,HUB_NAME,
HUB_LATITUDE,HUB_LONGITUDE,EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE,EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,nvl(SPARE_PS_BB_SEGG_1,'Unknown') SPARE_PS_BB_SEGG_1, 
nvl(SPARE_PS_BB_SEGG_2,'Unknown') SPARE_PS_BB_SEGG_2, 
nvl(SPARE_PS_BB_SEGG_3,'Unknown') SPARE_PS_BB_SEGG_3,
nvl(SPARE_PS_BB_SEGG_4,'Unknown') SPARE_PS_BB_SEGG_4, 
nvl(SPARE_PS_BB_SEGG_5,'Unknown') SPARE_PS_BB_SEGG_5, 
nvl(SPARE_PS_BB_SEGG_6,'Unknown') SPARE_PS_BB_SEGG_6, 
nvl(SPARE_PS_BB_SEGG_7,'Unknown') SPARE_PS_BB_SEGG_7,
nvl(SPARE_PS_BB_SEGG_8,'Unknown') SPARE_PS_BB_SEGG_8, 
nvl(SPARE_PS_BB_SEGG_9,'Unknown') SPARE_PS_BB_SEGG_9, 
nvl(SPARE_PS_BB_SEGG_10,'Unknown') SPARE_PS_BB_SEGG_10, nvl(SUM(
HTTP_METHOD_COUNT),0) as HTTP_METHOD_COUNT,nvl(SUM(HTTP_4XX_COUNT),
0) as HTTP_4XX_COUNT,nvl(SUM(HTTP_5XX_COUNT),0) as HTTP_5XX_COUNT,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then round(nvl(coalesce(
SUM(RESPONSE_TIME_STR),SUM(RESPONSE_TIME_APP),SUM(RESPONSE_TIME_BR)),0),
2) WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then round(nvl(coalesce(
SUM(RESPONSE_TIME_BR),SUM(RESPONSE_TIME_APP),SUM(RESPONSE_TIME_STR)),0),
2) else round(nvl(coalesce(SUM(RESPONSE_TIME_APP),
SUM(RESPONSE_TIME_STR),SUM(RESPONSE_TIME_BR)),0),2) end as 
APPLICATION_RESPONSE_TIME,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
RESPONSE_TIME_C_STR),SUM(RESPONSE_TIME_C_APP),SUM(RESPONSE_TIME_C_BR)),
0) WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
RESPONSE_TIME_C_BR),SUM(RESPONSE_TIME_C_APP),SUM(RESPONSE_TIME_C_STR)),
0) else nvl(coalesce(SUM(RESPONSE_TIME_C_APP),SUM(RESPONSE_TIME_C_STR),
SUM(RESPONSE_TIME_C_BR)),0) end as APPLICATION_RESPONSE_TIME_C,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then round(nvl(coalesce(
SUM(RTT_CLIENT_STR),SUM(RTT_CLIENT_APP),SUM(RTT_CLIENT_BR)),0),2) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then round(nvl(coalesce(SUM(
RTT_CLIENT_BR),SUM(RTT_CLIENT_APP),SUM(RTT_CLIENT_STR)),0),2) else 
round(nvl(coalesce(SUM(RTT_CLIENT_APP),SUM(RTT_CLIENT_STR),
SUM(RTT_CLIENT_BR)),0),2) end as RTT_CLIENT,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
RTT_CLIENT_C_STR),SUM(RTT_CLIENT_C_APP),SUM(RTT_CLIENT_C_BR)),0) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
RTT_CLIENT_C_BR),SUM(RTT_CLIENT_C_APP),SUM(RTT_CLIENT_C_STR)),0) else 
nvl(coalesce(SUM(RTT_CLIENT_C_APP),SUM(RTT_CLIENT_C_STR),
SUM(RTT_CLIENT_C_BR)),0) end as RTT_CLIENT_C,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then round(nvl(coalesce(
SUM(RTT_SERVER_STR),SUM(RTT_SERVER_APP),SUM(RTT_SERVER_BR)),0),2) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then round(nvl(coalesce(SUM(
RTT_SERVER_BR),SUM(RTT_SERVER_APP),SUM(RTT_SERVER_STR)),0),2) else 
round(nvl(coalesce(SUM(RTT_SERVER_APP),SUM(RTT_SERVER_STR),
SUM(RTT_SERVER_BR)),0),2) end as RTT_SERVER,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
RTT_SERVER_C_STR),SUM(RTT_SERVER_C_APP),SUM(RTT_SERVER_C_BR)),0) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
RTT_SERVER_C_BR),SUM(RTT_SERVER_C_APP),SUM(RTT_SERVER_C_STR)),0) else 
nvl(coalesce(SUM(RTT_SERVER_C_APP),SUM(RTT_SERVER_C_STR),
SUM(RTT_SERVER_C_BR)),0) end as RTT_SERVER_C, CASE WHEN 
APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(VISITS_STR),
SUM(VISITS_APP),SUM(VISITS_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(VISITS_BR),SUM(VISITS_APP),
SUM(VISITS_STR)),0) else nvl(coalesce(SUM(VISITS_APP),SUM(VISITS_STR),
SUM(VISITS_BR)),0) end as VISITS,CASE WHEN 
APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
DOWNLINK_VOLUME_STR),SUM(DOWNLINK_VOLUME_APP),SUM(DOWNLINK_VOLUME_BR)),
0) WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
DOWNLINK_VOLUME_BR),SUM(DOWNLINK_VOLUME_APP),SUM(DOWNLINK_VOLUME_STR)),
0) else nvl(coalesce(SUM(DOWNLINK_VOLUME_APP),SUM(DOWNLINK_VOLUME_STR),
SUM(DOWNLINK_VOLUME_BR)),0) end as DOWNLINK_VOLUME,CASE WHEN 
APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
UPLINK_VOLUME_STR),SUM(UPLINK_VOLUME_APP),SUM(UPLINK_VOLUME_BR)),0) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
UPLINK_VOLUME_BR),SUM(UPLINK_VOLUME_APP),SUM(UPLINK_VOLUME_STR)),0) else 
nvl(coalesce(SUM(UPLINK_VOLUME_APP),SUM(UPLINK_VOLUME_STR),
SUM(UPLINK_VOLUME_BR)),0) end as UPLINK_VOLUME, CASE WHEN 
APP_CATEGORY_TYPE='STREAMING_TYPE' then  coalesce(SUM(
STR_USAGE_TIME_AUDIO+STR_USAGE_TIME_VIDEO),SUM(USAGE_TIME),0) else 
coalesce(SUM(USAGE_TIME),SUM(STR_USAGE_TIME_AUDIO+STR_USAGE_TIME_VIDEO),
0) end as USAGE_TIME,nvl(SUM(STR_USAGE_TIME_AUDIO),0) as 
STR_USAGE_TIME_AUDIO,nvl(SUM(DELTA_STALL_TIME_AUDIO),0) as 
DELTA_STALL_TIME_AUDIO,nvl(SUM(DELTA_STALL_TIME_AUDIO_C),0) as 
DELTA_STALL_TIME_AUDIO_C,nvl(SUM(DELTA_STALL_COUNT_AUDIO),0) as 
DELTA_STALL_COUNT_AUDIO,nvl(SUM(DELTA_STALL_COUNT_AUDIO_C),0) as 
DELTA_STALL_COUNT_AUDIO_C,round(nvl(SUM(TIME_TO_START_AUDIO),0),
2) as TIME_TO_START_AUDIO,nvl(SUM(TIME_TO_START_AUDIO_C),0) as 
TIME_TO_START_AUDIO_C,nvl(SUM(QUALITY_TREND_AUDIO),0) as 
QUALITY_TREND_AUDIO,nvl(SUM(QUALITY_TREND_AUDIO_C),0) as 
QUALITY_TREND_AUDIO_C,nvl(SUM(STR_USAGE_TIME_VIDEO),0) as 
STR_USAGE_TIME_VIDEO, nvl(SUM(DELTA_STALL_TIME_VIDEO),0) as 
DELTA_STALL_TIME_VIDEO,nvl(SUM(DELTA_STALL_TIME_VIDEO_C),0) as 
DELTA_STALL_TIME_VIDEO_C,nvl(SUM(DELTA_STALL_COUNT_VIDEO),0) as 
DELTA_STALL_COUNT_VIDEO,nvl(SUM(DELTA_STALL_COUNT_VIDEO_C),0) as 
DELTA_STALL_COUNT_VIDEO_C, round(nvl(SUM(TIME_TO_START_VIDEO),0),
2) as TIME_TO_START_VIDEO,nvl(SUM(TIME_TO_START_VIDEO_C),0) as 
TIME_TO_START_VIDEO_C,nvl(SUM(QUALITY_TREND_VIDEO),0) as 
QUALITY_TREND_VIDEO,nvl(SUM(QUALITY_TREND_VIDEO_C),0) as 
QUALITY_TREND_VIDEO_C, nvl(SUM(VISITS_BR),0) as BROWSING_VISITS, 
nvl(SUM(VISITS_APP),0) as APPLICATION_VISITS, nvl(SUM(VISITS_STR),
0) as STREAMING_VISITS, nvl(SUM(UPLINK_VOLUME_STR),0) as 
STREAMING_UPLINK_VOLUME, nvl(SUM(DOWNLINK_VOLUME_STR),0) as 
STREAMING_DOWNLINK_VOLUME,SUB_TECHNOLOGY_ID, SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION,CASE WHEN 
APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
INITIAL_RESP_SUCCESS_STR),SUM(INITIAL_RESP_SUCCESS_APP),
SUM(INITIAL_RESP_SUCCESS_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(INITIAL_RESP_SUCCESS_BR),
SUM(INITIAL_RESP_SUCCESS_APP),SUM(INITIAL_RESP_SUCCESS_STR)),0) else 
nvl(coalesce(SUM(INITIAL_RESP_SUCCESS_APP),
SUM(INITIAL_RESP_SUCCESS_STR),SUM(INITIAL_RESP_SUCCESS_BR)),0) END AS 
INITIAL_APP_RESP_SUCCESS,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
INITIAL_RESP_ATTEMPTS_STR),SUM(INITIAL_RESP_ATTEMPTS_APP),
SUM(INITIAL_RESP_ATTEMPTS_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(INITIAL_RESP_ATTEMPTS_BR),
SUM(INITIAL_RESP_ATTEMPTS_APP),SUM(INITIAL_RESP_ATTEMPTS_STR)),0) else 
nvl(coalesce(SUM(INITIAL_RESP_ATTEMPTS_APP),
SUM(INITIAL_RESP_ATTEMPTS_STR),SUM(INITIAL_RESP_ATTEMPTS_BR)),0) end as 
INITIAL_APP_RESP_ATTEMPTS,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
TCP_CONNECT_SUCCESS_STR),SUM(TCP_CONNECT_SUCCESS_APP),
SUM(TCP_CONNECT_SUCCESS_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(TCP_CONNECT_SUCCESS_BR),
SUM(TCP_CONNECT_SUCCESS_APP),SUM(TCP_CONNECT_SUCCESS_STR)),0) else nvl(
coalesce(SUM(TCP_CONNECT_SUCCESS_APP),SUM(TCP_CONNECT_SUCCESS_STR),
SUM(TCP_CONNECT_SUCCESS_BR)),0) end as APP_TCP_CONNECT_SUCCESS,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
TCP_CONNECT_ATTEMPTS_STR),SUM(TCP_CONNECT_ATTEMPTS_APP),
SUM(TCP_CONNECT_ATTEMPTS_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(TCP_CONNECT_ATTEMPTS_BR),
SUM(TCP_CONNECT_ATTEMPTS_APP),SUM(TCP_CONNECT_ATTEMPTS_STR)),0) else 
nvl(coalesce(SUM(TCP_CONNECT_ATTEMPTS_APP),
SUM(TCP_CONNECT_ATTEMPTS_STR),SUM(TCP_CONNECT_ATTEMPTS_BR)),0) end as 
APP_TCP_CONNECT_ATTEMPTS,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
PACKETS_DL_STR),SUM(PACKETS_DL_APP),SUM(PACKETS_DL_BR)),0) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
PACKETS_DL_BR),SUM(PACKETS_DL_APP),SUM(PACKETS_DL_STR)),0) else nvl(
coalesce(SUM(PACKETS_DL_APP),SUM(PACKETS_DL_STR),SUM(PACKETS_DL_BR)),
0) end as APP_PACKETS_DL,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
PACKETS_UL_STR),SUM(PACKETS_UL_APP),SUM(PACKETS_UL_BR)),0) WHEN 
APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
PACKETS_UL_BR),SUM(PACKETS_UL_APP),SUM(PACKETS_UL_STR)),0) else nvl(
coalesce(SUM(PACKETS_UL_APP),SUM(PACKETS_UL_STR),SUM(PACKETS_UL_BR)),
0) end as APP_PACKETS_UL,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
RETRANSMITTED_PACKETS_DL_STR),SUM(RETRANSMITTED_PACKETS_DL_APP),
SUM(RETRANSMITTED_PACKETS_DL_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(RETRANSMITTED_PACKETS_DL_BR),
SUM(RETRANSMITTED_PACKETS_DL_APP),SUM(RETRANSMITTED_PACKETS_DL_STR)),
0) else nvl(coalesce(SUM(RETRANSMITTED_PACKETS_DL_APP),
SUM(RETRANSMITTED_PACKETS_DL_STR),SUM(RETRANSMITTED_PACKETS_DL_BR)),
0) end as APP_RETRANSMITTED_PACKETS_DL,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
RETRANSMITTED_PACKETS_UL_STR),SUM(RETRANSMITTED_PACKETS_UL_APP),
SUM(RETRANSMITTED_PACKETS_UL_BR)),0) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then nvl(coalesce(SUM(RETRANSMITTED_PACKETS_UL_BR),
SUM(RETRANSMITTED_PACKETS_UL_APP),SUM(RETRANSMITTED_PACKETS_UL_STR)),
0) else nvl(coalesce(SUM(RETRANSMITTED_PACKETS_UL_APP),
SUM(RETRANSMITTED_PACKETS_UL_STR),SUM(RETRANSMITTED_PACKETS_UL_BR)),
0) end as APP_RETRANSMITTED_PACKETS_UL,
CASE WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then round(nvl(coalesce(
SUM(LOAD_TIME_BR),SUM(LOAD_TIME_APP)),0),2) else round(nvl(coalesce(SUM(
LOAD_TIME_APP),SUM(LOAD_TIME_BR)),0),2) end as APP_LOAD_TIME,
CASE WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
LOAD_TIME_C_BR),SUM(LOAD_TIME_C_APP)),0) else nvl(coalesce(SUM(
LOAD_TIME_C_APP),SUM(LOAD_TIME_C_BR)),0) end as APP_LOAD_TIME_C,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then round(nvl(coalesce(
SUM(DATA_TRANSFER_TIME_DL_STR),SUM(DATA_TRANSFER_TIME_DL_APP),
SUM(DATA_TRANSFER_TIME_DL_BR)),0),2) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_DL_BR),
SUM(DATA_TRANSFER_TIME_DL_APP),SUM(DATA_TRANSFER_TIME_DL_STR)),0),
2) else round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_DL_APP),
SUM(DATA_TRANSFER_TIME_DL_STR),SUM(DATA_TRANSFER_TIME_DL_BR)),0),2) end 
as DATA_TRANSFER_TIME_DL,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then round(nvl(coalesce(
SUM(DATA_TRANSFER_TIME_UL_STR),SUM(DATA_TRANSFER_TIME_UL_APP),
SUM(DATA_TRANSFER_TIME_UL_BR)),0),2) WHEN APP_CATEGORY_TYPE = 
'BROWSING_TYPE' then round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_UL_BR),
SUM(DATA_TRANSFER_TIME_UL_APP),SUM(DATA_TRANSFER_TIME_UL_STR)),0),
2) else round(nvl(coalesce(SUM(DATA_TRANSFER_TIME_UL_APP),
SUM(DATA_TRANSFER_TIME_UL_STR),SUM(DATA_TRANSFER_TIME_UL_BR)),0),2) end 
as DATA_TRANSFER_TIME_UL,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
LOST_PACKETS_UL_STR),SUM(LOST_PACKETS_UL_APP),SUM(LOST_PACKETS_UL_BR)),
0) WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
LOST_PACKETS_UL_BR),SUM(LOST_PACKETS_UL_APP),SUM(LOST_PACKETS_UL_STR)),
0) else nvl(coalesce(SUM(LOST_PACKETS_UL_APP),SUM(LOST_PACKETS_UL_STR),
SUM(LOST_PACKETS_UL_BR)),0) end as APP_LOST_PACKETS_UL,
CASE WHEN APP_CATEGORY_TYPE='STREAMING_TYPE' then nvl(coalesce(SUM(
LOST_PACKETS_DL_STR),SUM(LOST_PACKETS_DL_APP),SUM(LOST_PACKETS_DL_BR)),
0) WHEN APP_CATEGORY_TYPE = 'BROWSING_TYPE' then nvl(coalesce(SUM(
LOST_PACKETS_DL_BR),SUM(LOST_PACKETS_DL_APP),SUM(LOST_PACKETS_DL_STR)),
0) else nvl(coalesce(SUM(LOST_PACKETS_DL_APP),SUM(LOST_PACKETS_DL_STR),
SUM(LOST_PACKETS_DL_BR)),0) end as APP_LOST_PACKETS_DL,
SUM(NVL(HTTP_METHOD_COUNT_STR,0)) AS STREAMING_HTTP_METHOD_COUNT,
SUM(NVL(HTTP_FAILURE_COUNT_STR,0)) AS STREAMING_HTTP_FAILURE_COUNT, 
SUM(EQUIP_VOLUME_UL) AS EQUIP_VOLUME_UL, SUM(EQUIP_VOLUME_DL) AS 
EQUIP_VOLUME_DL, SUM(EQUIP_DURATION_UL) AS EQUIP_DURATION_UL, 
SUM(EQUIP_DURATION_DL) AS EQUIP_DURATION_DL
 from
(
select TECHNOLOGY,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,EQUIP_LATITUDE,
EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS,
APPLICATION_NAME, MONITORED_APP_FLAG,APPLICATION_CATEGORY,
APP_CATEGORY_TYPE,REGION,CITY_ID,CITY,AREA_ID,AREA,ACCESS_NODE_ID,
ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE, ACCESS_NODE_LONGITUDE,HUB_ID,
HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,EXCHANGE_ID,EXCHANGE_NAME,
EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,EQUIP_MODEL, EQUIP_VENDOR,
DEVICE_CAPABILITY,SUBS_TYPE,CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,
GROUP_NAME,PARENT_GROUP_NAME,ASSOCIATION_NAME,SPARE_PS_BB_SEGG_1, 
SPARE_PS_BB_SEGG_2,SPARE_PS_BB_SEGG_3,SPARE_PS_BB_SEGG_4,
SPARE_PS_BB_SEGG_5,SPARE_PS_BB_SEGG_6,SPARE_PS_BB_SEGG_7,
SPARE_PS_BB_SEGG_8,SPARE_PS_BB_SEGG_9,SPARE_PS_BB_SEGG_10,
HTTP_METHOD_COUNT,HTTP_4XX_COUNT,HTTP_5XX_COUNT,VISITS_APP,VISITS_BR,
VISITS_STR,DOWNLINK_VOLUME_APP,UPLINK_VOLUME_APP,DOWNLINK_VOLUME_BR,
UPLINK_VOLUME_BR,DOWNLINK_VOLUME_STR,UPLINK_VOLUME_STR,USAGE_TIME,
STR_USAGE_TIME_AUDIO,DELTA_STALL_TIME_AUDIO,DELTA_STALL_TIME_AUDIO_C,
DELTA_STALL_COUNT_AUDIO,DELTA_STALL_COUNT_AUDIO_C,TIME_TO_START_AUDIO,
TIME_TO_START_AUDIO_C,QUALITY_TREND_AUDIO,QUALITY_TREND_AUDIO_C,
STR_USAGE_TIME_VIDEO,DELTA_STALL_TIME_VIDEO,DELTA_STALL_TIME_VIDEO_C,
DELTA_STALL_COUNT_VIDEO,DELTA_STALL_COUNT_VIDEO_C,TIME_TO_START_VIDEO,
TIME_TO_START_VIDEO_C,QUALITY_TREND_VIDEO,QUALITY_TREND_VIDEO_C,
SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION, 
INITIAL_RESP_SUCCESS_STR, INITIAL_RESP_SUCCESS_BR, 
INITIAL_RESP_SUCCESS_APP, INITIAL_RESP_ATTEMPTS_STR, 
INITIAL_RESP_ATTEMPTS_BR, INITIAL_RESP_ATTEMPTS_APP, 
TCP_CONNECT_SUCCESS_STR, TCP_CONNECT_SUCCESS_BR, 
TCP_CONNECT_SUCCESS_APP, TCP_CONNECT_ATTEMPTS_STR, 
TCP_CONNECT_ATTEMPTS_BR, TCP_CONNECT_ATTEMPTS_APP, PACKETS_DL_STR, 
PACKETS_DL_BR, PACKETS_DL_APP, PACKETS_UL_STR, PACKETS_UL_BR, 
PACKETS_UL_APP, RETRANSMITTED_PACKETS_DL_STR, 
RETRANSMITTED_PACKETS_DL_BR, RETRANSMITTED_PACKETS_DL_APP, 
RETRANSMITTED_PACKETS_UL_STR, RETRANSMITTED_PACKETS_UL_BR, 
RETRANSMITTED_PACKETS_UL_APP, LOAD_TIME_BR, LOAD_TIME_APP, 
LOAD_TIME_C_BR, LOAD_TIME_C_APP, DATA_TRANSFER_TIME_DL_STR, 
DATA_TRANSFER_TIME_DL_BR, DATA_TRANSFER_TIME_DL_APP, 
DATA_TRANSFER_TIME_UL_STR, DATA_TRANSFER_TIME_UL_BR, 
DATA_TRANSFER_TIME_UL_APP, RESPONSE_TIME_STR, RESPONSE_TIME_BR, 
RESPONSE_TIME_APP, RESPONSE_TIME_C_STR, RESPONSE_TIME_C_BR, 
RESPONSE_TIME_C_APP, RTT_CLIENT_STR, RTT_CLIENT_BR, RTT_CLIENT_APP, 
RTT_CLIENT_C_STR, RTT_CLIENT_C_BR, RTT_CLIENT_C_APP, RTT_SERVER_STR, 
RTT_SERVER_BR, RTT_SERVER_APP, RTT_SERVER_C_STR, RTT_SERVER_C_BR, 
RTT_SERVER_C_APP, LOST_PACKETS_UL_APP, LOST_PACKETS_DL_APP, 
LOST_PACKETS_UL_BR, LOST_PACKETS_DL_BR, LOST_PACKETS_UL_STR, 
LOST_PACKETS_DL_STR, HTTP_METHOD_COUNT_STR, HTTP_FAILURE_COUNT_STR, 
(CASE WHEN ROW_NUMBER=1 THEN SUM_UPLINK_VOLUME ELSE NULL END) AS 
EQUIP_VOLUME_UL,
(CASE WHEN ROW_NUMBER=1 THEN SUM_DOWNLINK_VOLUME ELSE NULL END) AS 
EQUIP_VOLUME_DL,
(CASE WHEN ROW_NUMBER=1 THEN 
ROUND((CASE WHEN (unix_timestamp(MAX_STOP_TIME_UL)-unix_timestamp(
MIN_START_TIME_UL)) < SUM_DATA_TRANSFER_TIME_UL/1000 THEN (
unix_timestamp(MAX_STOP_TIME_UL)-unix_timestamp(MIN_START_TIME_UL)) ELSE 
SUM_DATA_TRANSFER_TIME_UL/1000 END),2) 
ELSE NULL END) AS EQUIP_DURATION_UL,
(CASE WHEN ROW_NUMBER=1 THEN 
ROUND((CASE WHEN (unix_timestamp(MAX_STOP_TIME_DL)-unix_timestamp(
MIN_START_TIME_DL)) < SUM_DATA_TRANSFER_TIME_DL/1000 THEN (
unix_timestamp(MAX_STOP_TIME_DL)-unix_timestamp(MIN_START_TIME_DL)) ELSE 
SUM_DATA_TRANSFER_TIME_DL/1000 END),2) 
ELSE NULL END) AS EQUIP_DURATION_DL
from
(select *, ROW_NUMBER() OVER (PARTITION BY EQUIP_ID order by EQUIP_ID) 
AS ROW_NUMBER,
MIN(NEW_EVENT_START_DL) OVER (PARTITION BY EQUIP_ID) AS MIN_START_TIME_DL,
MIN(NEW_EVENT_START_UL) OVER (PARTITION BY EQUIP_ID) AS MIN_START_TIME_UL,
MAX(NEW_EVENT_STOP_DL) OVER (PARTITION BY EQUIP_ID) AS MAX_STOP_TIME_DL,
MAX(NEW_EVENT_STOP_UL) OVER (PARTITION BY EQUIP_ID) AS MAX_STOP_TIME_UL,
SUM(NEW_DOWNLINK_VOLUME_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DOWNLINK_VOLUME,
SUM(NEW_UPLINK_VOLUME_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_UPLINK_VOLUME,
SUM(NEW_DATA_TRANSFER_TIME_DL_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DATA_TRANSFER_TIME_DL,
SUM(NEW_DATA_TRANSFER_TIME_UL_APP) OVER (PARTITION BY EQUIP_ID) AS 
SUM_DATA_TRANSFER_TIME_UL
from
(select 
case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end as TECHNOLOGY,
EQUIP_ID as EQUIP_ID,EQUIP_ID_SEQ as EQUIP_ID_SEQ,SUBSCRIBER_ID as 
SUBSCRIBER_ID,EQUIP_LATITUDE as EQUIP_LATITUDE,EQUIP_LONGITUDE as 
EQUIP_LONGITUDE,CLIENT_DEVICE as CLIENT_DEVICE,CLIENT_DEVICE_TYPE as 
CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS as CLIENT_DEVICE_OS,custom_decode(
APPLICATION_NAME_DENORM,'Unknown', INITCAP(nvl(APPLICATION_NAME,
'Others')),APPLICATION_NAME_DENORM) as APPLICATION_NAME,
MONITORED_APP_FLAG as MONITORED_APP_FLAG,custom_decode(APPLICATION_CATEGORY,
'Unknown','Browsing',APPLICATION_CATEGORY ) as APPLICATION_CATEGORY,
custom_decode(APP_CATEGORY_TYPE,'Unknown','BROWSING_TYPE',APP_CATEGORY_TYPE 
) as APP_CATEGORY_TYPE,REGION as REGION,CITY_ID as CITY_ID,CITY as CITY,
AREA_ID as AREA_ID,AREA as AREA,ACCESS_NODE_ID as ACCESS_NODE_ID,
ACCESS_NODE_NAME as ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE as 
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE as ACCESS_NODE_LONGITUDE,
HUB_ID as HUB_ID,HUB_NAME as HUB_NAME,HUB_LATITUDE as HUB_LATITUDE,
HUB_LONGITUDE as HUB_LONGITUDE,EXCHANGE_ID as EXCHANGE_ID,EXCHANGE_NAME 
as EXCHANGE_NAME,EXCHANGE_LATITUDE as EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE as EXCHANGE_LONGITUDE,EQUIP_MODEL as EQUIP_MODEL,
EQUIP_VENDOR as EQUIP_VENDOR,DEVICE_CAPABILITY as DEVICE_CAPABILITY,
SUBS_TYPE as SUBS_TYPE,CUSTOMER_SEGMENTATION as CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY as CUSTOMER_SUBCATEGORY,GROUP_NAME as GROUP_NAME,
PARENT_GROUP_NAME as PARENT_GROUP_NAME,ASSOCIATION_NAME as 
ASSOCIATION_NAME,SPARE_US_BB_1 as SPARE_PS_BB_SEGG_1,SPARE_US_BB_2 as 
SPARE_PS_BB_SEGG_2,SPARE_US_BB_3 as SPARE_PS_BB_SEGG_3,SPARE_US_BB_4 as 
SPARE_PS_BB_SEGG_4,SPARE_US_BB_5 as SPARE_PS_BB_SEGG_5,SPARE_US_BB_6 as 
SPARE_PS_BB_SEGG_6,SPARE_US_BB_7 as SPARE_PS_BB_SEGG_7,SPARE_US_BB_8 as 
SPARE_PS_BB_SEGG_8,SPARE_US_BB_9 as SPARE_PS_BB_SEGG_9,SPARE_US_BB_10 as 
SPARE_PS_BB_SEGG_10,NULL as HTTP_METHOD_COUNT,NULL as HTTP_4XX_COUNT,
NULL as HTTP_5XX_COUNT,SUM(VISITS) as VISITS_APP,NULL as VISITS_BR,
NULL as VISITS_STR,SUM(BYTES_DL) as DOWNLINK_VOLUME_APP,SUM(BYTES_UL) as 
UPLINK_VOLUME_APP,NULL as DOWNLINK_VOLUME_BR,NULL as UPLINK_VOLUME_BR,
NULL as DOWNLINK_VOLUME_STR,NULL as UPLINK_VOLUME_STR,SUM(nvl(
TIME_DURATION,0)) as USAGE_TIME,NULL as STR_USAGE_TIME_AUDIO,NULL as 
DELTA_STALL_TIME_AUDIO,NULL as DELTA_STALL_TIME_AUDIO_C,NULL as 
DELTA_STALL_COUNT_AUDIO,NULL as DELTA_STALL_COUNT_AUDIO_C,NULL as 
TIME_TO_START_AUDIO,NULL as TIME_TO_START_AUDIO_C,NULL as 
QUALITY_TREND_AUDIO,NULL as QUALITY_TREND_AUDIO_C,NULL as 
STR_USAGE_TIME_VIDEO,NULL as DELTA_STALL_TIME_VIDEO,NULL as 
DELTA_STALL_TIME_VIDEO_C,NULL as DELTA_STALL_COUNT_VIDEO,NULL as 
DELTA_STALL_COUNT_VIDEO_C, NULL as TIME_TO_START_VIDEO,NULL as 
TIME_TO_START_VIDEO_C,NULL as QUALITY_TREND_VIDEO,NULL as 
QUALITY_TREND_VIDEO_C,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,DEVICE_EQUIP_ID,
DEVICE_SOFTWAREVERSION, NULL AS INITIAL_RESP_SUCCESS_STR, NULL AS 
INITIAL_RESP_SUCCESS_BR, SUM(INITIAL_APP_RESPONSE_SUCCESS) AS 
INITIAL_RESP_SUCCESS_APP, NULL AS INITIAL_RESP_ATTEMPTS_STR, NULL AS 
INITIAL_RESP_ATTEMPTS_BR, SUM(INITIAL_APP_RESPONSE_ATTEMPTS) AS 
INITIAL_RESP_ATTEMPTS_APP, NULL AS TCP_CONNECT_SUCCESS_STR, NULL AS 
TCP_CONNECT_SUCCESS_BR, SUM(TCP_CONNECT_SUCCESS) AS 
TCP_CONNECT_SUCCESS_APP, NULL AS TCP_CONNECT_ATTEMPTS_STR, NULL AS 
TCP_CONNECT_ATTEMPTS_BR, SUM(TCP_CONNECT_ATTEMPTS) AS 
TCP_CONNECT_ATTEMPTS_APP, NULL AS PACKETS_DL_STR, NULL AS PACKETS_DL_BR, 
SUM(PACKETS_DL) AS PACKETS_DL_APP, NULL AS PACKETS_UL_STR, NULL AS 
PACKETS_UL_BR, SUM(PACKETS_UL) AS PACKETS_UL_APP, NULL AS 
RETRANSMITTED_PACKETS_DL_STR, NULL AS RETRANSMITTED_PACKETS_DL_BR, 
SUM(RETRANSMITTED_PACKETS_DL) AS RETRANSMITTED_PACKETS_DL_APP, NULL AS 
RETRANSMITTED_PACKETS_UL_STR, NULL AS RETRANSMITTED_PACKETS_UL_BR, 
SUM(RETRANSMITTED_PACKETS_UL) AS RETRANSMITTED_PACKETS_UL_APP, NULL AS 
LOAD_TIME_BR, SUM(APPLICATION_LOAD_TIME) AS LOAD_TIME_APP, NULL AS 
LOAD_TIME_C_BR, SUM(CASE WHEN NVL(APPLICATION_LOAD_TIME_C,0) = 0 then 
case when APPLICATION_LOAD_TIME > 0 THEN 1 ELSE NULL END ELSE 
APPLICATION_LOAD_TIME_C end) AS LOAD_TIME_C_APP, NULL AS 
DATA_TRANSFER_TIME_DL_STR, NULL AS DATA_TRANSFER_TIME_DL_BR,case when 
nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL 
as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_DL,0)) then (nvl(
round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL as 
DOUBLE))) * 1000),0)) else SUM(DATA_TRANSFER_TIME_DL) end AS 
DATA_TRANSFER_TIME_DL_APP, NULL AS DATA_TRANSFER_TIME_UL_STR, NULL AS 
DATA_TRANSFER_TIME_UL_BR, case when nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) < sum(nvl(
DATA_TRANSFER_TIME_UL,0)) then nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) else SUM(
DATA_TRANSFER_TIME_UL) end AS DATA_TRANSFER_TIME_UL_APP, NULL AS 
RESPONSE_TIME_STR, NULL AS RESPONSE_TIME_BR, 
SUM(APPLICATION_RESPONSE_TIME) AS RESPONSE_TIME_APP, NULL AS 
RESPONSE_TIME_C_STR, NULL AS RESPONSE_TIME_C_BR, SUM(CASE WHEN NVL(
APPLICATION_RESPONSE_TIME_C,0) = 0 THEN CASE WHEN 
APPLICATION_RESPONSE_TIME > 0 THEN 1 ELSE NULL END ELSE 
APPLICATION_RESPONSE_TIME_C END) AS RESPONSE_TIME_C_APP, NULL AS 
RTT_CLIENT_STR, NULL AS RTT_CLIENT_BR, SUM(RTT_CLIENT) AS 
RTT_CLIENT_APP, NULL AS RTT_CLIENT_C_STR, NULL AS RTT_CLIENT_C_BR, 
SUM(CASE WHEN NVL(RTT_CLIENT_C,0) = 0 THEN CASE WHEN RTT_CLIENT > 0 THEN 
1 ELSE NULL END ELSE RTT_CLIENT_C END) AS RTT_CLIENT_C_APP, NULL AS 
RTT_SERVER_STR, NULL AS RTT_SERVER_BR, SUM(RTT_SERVER) AS 
RTT_SERVER_APP, NULL AS RTT_SERVER_C_STR, NULL AS RTT_SERVER_C_BR, 
SUM(CASE WHEN NVL(RTT_SERVER_C,0) = 0 THEN CASE WHEN RTT_SERVER > 0 THEN 
1 ELSE NULL END ELSE RTT_SERVER_C END) AS RTT_SERVER_C_APP, 
SUM(LOST_PACKETS_UL) AS LOST_PACKETS_UL_APP, SUM(LOST_PACKETS_DL) AS 
LOST_PACKETS_DL_APP, NULL AS LOST_PACKETS_UL_BR, NULL AS 
LOST_PACKETS_DL_BR, NULL AS LOST_PACKETS_UL_STR, NULL AS 
LOST_PACKETS_DL_STR, NULL AS HTTP_METHOD_COUNT_STR, NULL AS 
HTTP_FAILURE_COUNT_STR, MIN(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 
THEN EVENT_START_DL ELSE NULL END) AS NEW_EVENT_START_DL, MIN(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END) AS 
NEW_EVENT_START_UL, from_unixtime(CAST((nvl(case when unix_timestamp(
max(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_STOP_DL ELSE 
NULL END)) - unix_timestamp(min(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL 
> 0 THEN EVENT_START_DL ELSE NULL END)) < sum(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN DATA_TRANSFER_TIME_DL ELSE NULL 
END/1000) then unix_timestamp(max(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_STOP_DL ELSE NULL END)) - 
unix_timestamp(min(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN 
EVENT_START_DL ELSE NULL END)) else sum(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN DATA_TRANSFER_TIME_DL ELSE NULL 
END/1000) end,0) + unix_timestamp(MIN(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_START_DL ELSE NULL END))) 
AS BIGINT)) AS NEW_EVENT_STOP_DL, from_unixtime(CAST((nvl(case when 
unix_timestamp(max(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN 
EVENT_STOP_UL ELSE NULL END)) - unix_timestamp(min(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END)) < 
sum(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN 
DATA_TRANSFER_TIME_UL ELSE NULL END/1000) then unix_timestamp(max(CASE 
WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_STOP_UL ELSE NULL 
END)) - unix_timestamp(min(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 
THEN EVENT_START_UL ELSE NULL END)) else sum(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN DATA_TRANSFER_TIME_UL ELSE NULL 
END/1000) end,0) + unix_timestamp(MIN(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END))) 
AS BIGINT)) AS NEW_EVENT_STOP_UL, case when round((max(CAST(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_STOP_DL ELSE NULL END AS 
DOUBLE)) - min(CAST(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN 
EVENT_START_DL ELSE NULL END as DOUBLE))) * 1000) < sum(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN DATA_TRANSFER_TIME_DL ELSE NULL 
END) then round((max(CAST(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 
THEN EVENT_STOP_DL ELSE NULL END AS DOUBLE)) - min(CAST(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN EVENT_START_DL ELSE NULL END as 
DOUBLE))) * 1000) else sum(CASE WHEN BYTES_DL/DATA_TRANSFER_TIME_DL > 0 
THEN DATA_TRANSFER_TIME_DL ELSE NULL END) end AS 
NEW_DATA_TRANSFER_TIME_DL_APP, case when round((max(CAST(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_STOP_UL ELSE NULL END AS 
DOUBLE)) - min(CAST(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN 
EVENT_START_UL ELSE NULL END as DOUBLE))) * 1000) < sum(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN DATA_TRANSFER_TIME_UL ELSE NULL 
END) then round((max(CAST(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 
THEN EVENT_STOP_UL ELSE NULL END AS DOUBLE)) - min(CAST(CASE WHEN 
BYTES_UL/DATA_TRANSFER_TIME_UL > 0 THEN EVENT_START_UL ELSE NULL END as 
DOUBLE))) * 1000) else sum(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 0 
THEN DATA_TRANSFER_TIME_UL ELSE NULL END) end AS 
NEW_DATA_TRANSFER_TIME_UL_APP, SUM(CASE WHEN 
BYTES_DL/DATA_TRANSFER_TIME_DL > 0 THEN BYTES_DL ELSE NULL END) as 
NEW_DOWNLINK_VOLUME_APP, SUM(CASE WHEN BYTES_UL/DATA_TRANSFER_TIME_UL > 
0 THEN BYTES_UL ELSE NULL END) as NEW_UPLINK_VOLUME_APP from 
US_BB_APPLICATIONS_1 WHERE 
US_BB_APPLICATIONS_1.dt < '112' group by case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,
EQUIP_LATITUDE,EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS,custom_decode(APPLICATION_NAME_DENORM,'Unknown', INITCAP(
nvl(APPLICATION_NAME,'Others')),APPLICATION_NAME_DENORM),
MONITORED_APP_FLAG,custom_decode(APPLICATION_CATEGORY,'Unknown','Browsing',
APPLICATION_CATEGORY ),custom_decode(APP_CATEGORY_TYPE,'Unknown',
'BROWSING_TYPE',APP_CATEGORY_TYPE ),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION )temp1 )temp2
UNION ALL  select 
case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end as TECHNOLOGY,
EQUIP_ID as EQUIP_ID,EQUIP_ID_SEQ as EQUIP_ID_SEQ,SUBSCRIBER_ID as 
SUBSCRIBER_ID,EQUIP_LATITUDE as EQUIP_LATITUDE,EQUIP_LONGITUDE as 
EQUIP_LONGITUDE,CLIENT_DEVICE as CLIENT_DEVICE,CLIENT_DEVICE_TYPE as 
CLIENT_DEVICE_TYPE,CLIENT_DEVICE_OS as CLIENT_DEVICE_OS,custom_decode(
APPLICATION_NAME_DENORM,'Unknown',INITCAP(nvl(APPLICATION_NAME,
'Others')),APPLICATION_NAME_DENORM) as APPLICATION_NAME,
MONITORED_APP_FLAG as MONITORED_APP_FLAG,custom_decode(APPLICATION_CATEGORY,
'Unknown','Browsing',APPLICATION_CATEGORY ) as APPLICATION_CATEGORY,
custom_decode(APP_CATEGORY_TYPE,'Unknown','BROWSING_TYPE',APP_CATEGORY_TYPE 
) as APP_CATEGORY_TYPE,REGION as REGION,CITY_ID as CITY_ID,CITY as CITY,
AREA_ID as AREA_ID,AREA as AREA,ACCESS_NODE_ID as ACCESS_NODE_ID,
ACCESS_NODE_NAME as ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE as 
ACCESS_NODE_LATITUDE,ACCESS_NODE_LONGITUDE as ACCESS_NODE_LONGITUDE,
HUB_ID as HUB_ID,HUB_NAME as HUB_NAME,HUB_LATITUDE as HUB_LATITUDE,
HUB_LONGITUDE as HUB_LONGITUDE,EXCHANGE_ID as EXCHANGE_ID,EXCHANGE_NAME 
as EXCHANGE_NAME,EXCHANGE_LATITUDE as EXCHANGE_LATITUDE,
EXCHANGE_LONGITUDE as EXCHANGE_LONGITUDE,EQUIP_MODEL as EQUIP_MODEL,
EQUIP_VENDOR as EQUIP_VENDOR,DEVICE_CAPABILITY as DEVICE_CAPABILITY,
SUBS_TYPE as SUBS_TYPE,CUSTOMER_SEGMENTATION as CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY as CUSTOMER_SUBCATEGORY,GROUP_NAME as GROUP_NAME,
PARENT_GROUP_NAME as PARENT_GROUP_NAME,ASSOCIATION_NAME as 
ASSOCIATION_NAME,SPARE_US_BB_1 as SPARE_PS_BB_SEGG_1,SPARE_US_BB_2 as 
SPARE_PS_BB_SEGG_2,SPARE_US_BB_3 as SPARE_PS_BB_SEGG_3,SPARE_US_BB_4 as 
SPARE_PS_BB_SEGG_4,SPARE_US_BB_5 as SPARE_PS_BB_SEGG_5,SPARE_US_BB_6 as 
SPARE_PS_BB_SEGG_6,SPARE_US_BB_7 as SPARE_PS_BB_SEGG_7,SPARE_US_BB_8 as 
SPARE_PS_BB_SEGG_8,SPARE_US_BB_9 as SPARE_PS_BB_SEGG_9,SPARE_US_BB_10 as 
SPARE_PS_BB_SEGG_10,SUM(nvl(HTTP_METHOD_COUNT,0)) as HTTP_METHOD_COUNT,
SUM(CASE WHEN CAUSE_CODE_GROUP = 0 OR (HTTP_CAUSE_CODE >399 AND 
HTTP_CAUSE_CODE <500) THEN nvl(HTTP_CAUSE_CODE_COUNT,0) ELSE 0 END) AS 
HTTP_4XX_COUNT,SUM(CASE WHEN CAUSE_CODE_GROUP = 1 OR (HTTP_CAUSE_CODE 
>499 AND HTTP_CAUSE_CODE <600) THEN nvl(HTTP_CAUSE_CODE_COUNT,0) ELSE 0 
END) AS HTTP_5XX_COUNT,NULL as VISITS_APP,SUM(VISITS) as VISITS_BR,
NULL as VISITS_STR,NULL as DOWNLINK_VOLUME_APP,NULL as 
UPLINK_VOLUME_APP,SUM(BYTES_DL) as DOWNLINK_VOLUME_BR, SUM(BYTES_UL) as 
UPLINK_VOLUME_BR,NULL as DOWNLINK_VOLUME_STR,NULL as UPLINK_VOLUME_STR,
NULL as USAGE_TIME,NULL as STR_USAGE_TIME_AUDIO,NULL as 
DELTA_STALL_TIME_AUDIO,NULL as DELTA_STALL_TIME_AUDIO_C,NULL as 
DELTA_STALL_COUNT_AUDIO,NULL as DELTA_STALL_COUNT_AUDIO_C,NULL as 
TIME_TO_START_AUDIO,NULL as TIME_TO_START_AUDIO_C,NULL as 
QUALITY_TREND_AUDIO,NULL as QUALITY_TREND_AUDIO_C,NULL as 
STR_USAGE_TIME_VIDEO,NULL as DELTA_STALL_TIME_VIDEO,NULL as 
DELTA_STALL_TIME_VIDEO_C,NULL as DELTA_STALL_COUNT_VIDEO,NULL as 
DELTA_STALL_COUNT_VIDEO_C, NULL as TIME_TO_START_VIDEO,NULL as 
TIME_TO_START_VIDEO_C,NULL as QUALITY_TREND_VIDEO,NULL as 
QUALITY_TREND_VIDEO_C,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,DEVICE_EQUIP_ID,
DEVICE_SOFTWAREVERSION,NULL AS INITIAL_RESP_SUCCESS_STR, 
SUM(INITIAL_WEBPAGE_RESP_SUCCESS) AS INITIAL_RESP_SUCCESS_BR, NULL AS 
INITIAL_RESP_SUCCESS_APP, NULL AS INITIAL_RESP_ATTEMPTS_STR, 
SUM(INITIAL_WEBPAGE_RESP_ATTEMPTS) AS INITIAL_RESP_ATTEMPTS_BR, NULL AS 
INITIAL_RESP_ATTEMPTS_APP, NULL AS TCP_CONNECT_SUCCESS_STR, 
SUM(TCP_CONNECT_SUCCESS) AS TCP_CONNECT_SUCCESS_BR, NULL AS 
TCP_CONNECT_SUCCESS_APP, NULL AS TCP_CONNECT_ATTEMPTS_STR, 
SUM(TCP_CONNECT_ATTEMPTS) AS TCP_CONNECT_ATTEMPTS_BR, NULL AS 
TCP_CONNECT_ATTEMPTS_APP, NULL AS PACKETS_DL_STR, SUM(PACKETS_DL) AS 
PACKETS_DL_BR, NULL AS PACKETS_DL_APP, NULL AS PACKETS_UL_STR, 
SUM(PACKETS_UL) AS PACKETS_UL_BR, NULL AS PACKETS_UL_APP, NULL AS 
RETRANSMITTED_PACKETS_DL_STR, SUM(RETRANSMITTED_PACKETS_DL) AS 
RETRANSMITTED_PACKETS_DL_BR, NULL AS RETRANSMITTED_PACKETS_DL_APP, 
NULL AS RETRANSMITTED_PACKETS_UL_STR, SUM(RETRANSMITTED_PACKETS_UL) AS 
RETRANSMITTED_PACKETS_UL_BR, NULL AS RETRANSMITTED_PACKETS_UL_APP, 
SUM(WEBPAGE_LOAD_TIME) AS LOAD_TIME_BR, NULL AS LOAD_TIME_APP, SUM(CASE 
WHEN NVL(WEBPAGE_LOAD_TIME_C,0) = 0 THEN CASE WHEN WEBPAGE_LOAD_TIME > 0 
THEN 1 ELSE NULL END ELSE WEBPAGE_LOAD_TIME_C END) AS LOAD_TIME_C_BR, 
NULL AS LOAD_TIME_C_APP, NULL AS DATA_TRANSFER_TIME_DL_STR,case when 
nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL 
as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_DL,0)) then (nvl(
round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(EVENT_START_DL as 
DOUBLE))) * 1000),0)) else SUM(DATA_TRANSFER_TIME_DL) end AS 
DATA_TRANSFER_TIME_DL_BR, NULL AS DATA_TRANSFER_TIME_DL_APP, NULL AS 
DATA_TRANSFER_TIME_UL_STR,case when nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) < sum(nvl(
DATA_TRANSFER_TIME_UL,0)) then nvl(round((max(CAST(EVENT_STOP_UL AS 
DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 1000),0) else SUM(
DATA_TRANSFER_TIME_UL) end AS DATA_TRANSFER_TIME_UL_BR, NULL AS 
DATA_TRANSFER_TIME_UL_APP, NULL AS RESPONSE_TIME_STR, 
SUM(APPLICATION_RESPONSE_TIME) AS RESPONSE_TIME_BR, NULL AS 
RESPONSE_TIME_APP, NULL AS RESPONSE_TIME_C_STR, SUM(CASE WHEN nvl(
APPLICATION_RESPONSE_TIME_C,0) = 0 then case when 
APPLICATION_RESPONSE_TIME > 0 THEN 1 ELSE NULL END ELSE 
APPLICATION_RESPONSE_TIME_C END) AS RESPONSE_TIME_C_BR, NULL AS 
RESPONSE_TIME_C_APP, NULL AS RTT_CLIENT_STR, SUM(RTT_CLIENT) AS 
RTT_CLIENT_BR, NULL AS RTT_CLIENT_APP, NULL AS RTT_CLIENT_C_STR, 
SUM(CASE WHEN nvl(RTT_CLIENT_C,0) = 0 then case when RTT_CLIENT > 0 THEN 
1 ELSE NULL END ELSE RTT_CLIENT_C END) AS RTT_CLIENT_C_BR, NULL AS 
RTT_CLIENT_C_APP, NULL AS RTT_SERVER_STR, SUM(RTT_SERVER)  AS 
RTT_SERVER_BR, NULL AS RTT_SERVER_APP, NULL AS RTT_SERVER_C_STR, 
SUM(CASE WHEN nvl(RTT_SERVER_C,0) = 0 then case when RTT_SERVER > 0 THEN 
1 ELSE NULL END ELSE RTT_SERVER_C END) AS RTT_SERVER_C_BR, NULL AS 
RTT_SERVER_C_APP, NULL AS LOST_PACKETS_UL_APP, NULL AS 
LOST_PACKETS_DL_APP, SUM(LOST_PACKETS_UL) AS LOST_PACKETS_UL_BR, 
SUM(LOST_PACKETS_DL) AS LOST_PACKETS_DL_BR, NULL AS LOST_PACKETS_UL_STR, 
NULL AS LOST_PACKETS_DL_STR, NULL AS HTTP_METHOD_COUNT_STR, NULL AS 
HTTP_FAILURE_COUNT_STR, NULL AS EQUIP_VOLUME_UL, NULL AS 
EQUIP_VOLUME_DL, NULL AS EQUIP_DURATION_UL, NULL AS EQUIP_DURATION_DL  
from US1_BB_BROWSING_1 US_BB_BROWSING_1 WHERE 
US_BB_BROWSING_1.dt < '112' group by case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,
EQUIP_LATITUDE,EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS,custom_decode(APPLICATION_NAME_DENORM,'Unknown',INITCAP(nvl(
APPLICATION_NAME,'Others')),APPLICATION_NAME_DENORM),
MONITORED_APP_FLAG,custom_decode(APPLICATION_CATEGORY,'Unknown','Browsing',
APPLICATION_CATEGORY ),custom_decode(APP_CATEGORY_TYPE,'Unknown',
'BROWSING_TYPE',APP_CATEGORY_TYPE ),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION
UNION ALL  select 
case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end as TECHNOLOGY,EQUIP_ID as EQUIP_ID,
EQUIP_ID_SEQ as EQUIP_ID_SEQ,SUBSCRIBER_ID as SUBSCRIBER_ID,
EQUIP_LATITUDE as EQUIP_LATITUDE,EQUIP_LONGITUDE as EQUIP_LONGITUDE,
CLIENT_DEVICE as CLIENT_DEVICE,CLIENT_DEVICE_TYPE as CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS as CLIENT_DEVICE_OS,custom_decode(APPLICATION_NAME_DENORM,
'Unknown',INITCAP(nvl(APPLICATION_NAME,'Others')),
APPLICATION_NAME_DENORM) as APPLICATION_NAME,MONITORED_APP_FLAG as 
MONITORED_APP_FLAG,custom_decode(APPLICATION_CATEGORY,'Unknown',custom_decode(
CONTENT_TYPE,'AUDIO','Audio Streaming','Video Streaming'),
APPLICATION_CATEGORY) as APPLICATION_CATEGORY,custom_decode(APP_CATEGORY_TYPE,
'Unknown','STREAMING_TYPE',APP_CATEGORY_TYPE) as APP_CATEGORY_TYPE,
REGION as REGION,CITY_ID as CITY_ID,CITY as CITY,AREA_ID as AREA_ID,
AREA as AREA,ACCESS_NODE_ID as ACCESS_NODE_ID,ACCESS_NODE_NAME as 
ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE as ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE as ACCESS_NODE_LONGITUDE,HUB_ID as HUB_ID,HUB_NAME 
as HUB_NAME,HUB_LATITUDE as HUB_LATITUDE,HUB_LONGITUDE as HUB_LONGITUDE,
EXCHANGE_ID as EXCHANGE_ID,EXCHANGE_NAME as EXCHANGE_NAME,
EXCHANGE_LATITUDE as EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE as 
EXCHANGE_LONGITUDE,EQUIP_MODEL as EQUIP_MODEL,EQUIP_VENDOR as 
EQUIP_VENDOR,DEVICE_CAPABILITY as DEVICE_CAPABILITY,SUBS_TYPE as 
SUBS_TYPE,CUSTOMER_SEGMENTATION as CUSTOMER_SEGMENTATION,
CUSTOMER_SUBCATEGORY as CUSTOMER_SUBCATEGORY,GROUP_NAME as GROUP_NAME,
PARENT_GROUP_NAME as PARENT_GROUP_NAME,ASSOCIATION_NAME as 
ASSOCIATION_NAME,SPARE_US_BB_1 as SPARE_PS_BB_SEGG_1,SPARE_US_BB_2 as 
SPARE_PS_BB_SEGG_2,SPARE_US_BB_3 as SPARE_PS_BB_SEGG_3,SPARE_US_BB_4 as 
SPARE_PS_BB_SEGG_4,SPARE_US_BB_5 as SPARE_PS_BB_SEGG_5,SPARE_US_BB_6 as 
SPARE_PS_BB_SEGG_6,SPARE_US_BB_7 as SPARE_PS_BB_SEGG_7,SPARE_US_BB_8 as 
SPARE_PS_BB_SEGG_8,SPARE_US_BB_9 as SPARE_PS_BB_SEGG_9,SPARE_US_BB_10 as 
SPARE_PS_BB_SEGG_10,NULL as HTTP_METHOD_COUNT,NULL as HTTP_4XX_COUNT,
NULL as HTTP_5XX_COUNT,NULL as VISITS_APP,NULL as VISITS_BR,SUM(VISITS) 
as VISITS_STR,NULL as DOWNLINK_VOLUME_APP,NULL as UPLINK_VOLUME_APP,
NULL as DOWNLINK_VOLUME_BR,NULL as UPLINK_VOLUME_BR,SUM(BYTES_DL) as 
DOWNLINK_VOLUME_STR, SUM(BYTES_UL) as UPLINK_VOLUME_STR,NULL as 
USAGE_TIME,SUM(CASE WHEN CONTENT_TYPE = 'AUDIO' THEN TIME_DURATION 
ELSE 0 END) as STR_USAGE_TIME_AUDIO,SUM(CASE WHEN CONTENT_TYPE = 
'AUDIO' THEN DELTA_STALL_TIME ELSE 0 END) as DELTA_STALL_TIME_AUDIO,
SUM(CASE WHEN CONTENT_TYPE = 'AUDIO' AND NVL(DELTA_STALL_TIME_C,
0) = 0 THEN CASE WHEN DELTA_STALL_TIME >= 0 THEN 1 ELSE 0 END WHEN 
CONTENT_TYPE = 'AUDIO' THEN DELTA_STALL_TIME_C ELSE 0 END) as 
DELTA_STALL_TIME_AUDIO_C,SUM(CASE WHEN CONTENT_TYPE = 'AUDIO' THEN 
DELTA_STALL_COUNT ELSE 0 END) as DELTA_STALL_COUNT_AUDIO,SUM(CASE WHEN 
CONTENT_TYPE = 'AUDIO' AND DELTA_STALL_COUNT >= 0 THEN  1 ELSE 0 END) 
as DELTA_STALL_COUNT_AUDIO_C,SUM(CASE WHEN CONTENT_TYPE = 'AUDIO' THEN 
TIME_TO_START ELSE 0 END) as TIME_TO_START_AUDIO,SUM(CASE WHEN 
CONTENT_TYPE = 'AUDIO' AND NVL(TIME_TO_START_C,0) = 0 THEN CASE WHEN 
TIME_TO_START > 0 THEN 1 ELSE 0 END WHEN CONTENT_TYPE = 'AUDIO' THEN 
TIME_TO_START_C ELSE 0 END) as TIME_TO_START_AUDIO_C,SUM(CASE WHEN 
CONTENT_TYPE = 'AUDIO' THEN nvl(UPSHIFT_COUNT,0) - nvl(
DOWNSHIFT_COUNT,0) ELSE 0 END) as QUALITY_TREND_AUDIO,SUM(CASE WHEN 
CONTENT_TYPE = 'AUDIO' AND coalesce(UPSHIFT_COUNT,DOWNSHIFT_COUNT,
0) > 0 THEN 1 ELSE 0 END) as QUALITY_TREND_AUDIO_C,SUM(CASE WHEN 
CONTENT_TYPE = 'VIDEO' THEN TIME_DURATION ELSE 0 END) as 
STR_USAGE_TIME_VIDEO,SUM(CASE WHEN CONTENT_TYPE = 'VIDEO' THEN 
DELTA_STALL_TIME ELSE 0 END) as DELTA_STALL_TIME_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = 'VIDEO' AND NVL(DELTA_STALL_TIME_C,0) = 0 THEN CASE 
WHEN DELTA_STALL_TIME >= 0 THEN 1 ELSE 0 END WHEN CONTENT_TYPE = 
'VIDEO' THEN DELTA_STALL_TIME_C ELSE 0 END) as 
DELTA_STALL_TIME_VIDEO_C,SUM(CASE WHEN CONTENT_TYPE = 'VIDEO' THEN 
DELTA_STALL_COUNT ELSE 0 END) as DELTA_STALL_COUNT_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = 'VIDEO' AND DELTA_STALL_COUNT >= 0 THEN  1 ELSE 0 END) 
as DELTA_STALL_COUNT_VIDEO_C, SUM(CASE WHEN CONTENT_TYPE = 'VIDEO' 
THEN TIME_TO_START ELSE 0 END) as TIME_TO_START_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = 'VIDEO' AND NVL(TIME_TO_START_C,0) = 0 THEN CASE WHEN 
TIME_TO_START > 0 THEN 1 ELSE 0 END WHEN CONTENT_TYPE = 'VIDEO' THEN 
TIME_TO_START_C ELSE 0 END) as TIME_TO_START_VIDEO_C,SUM(CASE WHEN 
CONTENT_TYPE = 'VIDEO' THEN nvl(UPSHIFT_COUNT,0) - nvl(
DOWNSHIFT_COUNT,0) ELSE 0 END) as QUALITY_TREND_VIDEO,SUM(CASE WHEN 
CONTENT_TYPE = 'VIDEO' AND coalesce(UPSHIFT_COUNT,DOWNSHIFT_COUNT,
0) > 0 THEN 1 ELSE 0 END) as QUALITY_TREND_VIDEO_C,SUB_TECHNOLOGY_ID,
SUB_TECHNOLOGY,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION,
SUM(INITIAL_HTTP_REPLY_DATA_MSG) AS INITIAL_RESP_SUCCESS_STR, NULL AS 
INITIAL_RESP_SUCCESS_BR, NULL AS INITIAL_RESP_SUCCESS_APP, 
SUM(INITIAL_HTTP_GET_MSG) AS INITIAL_RESP_ATTEMPTS_STR, NULL AS 
INITIAL_RESP_ATTEMPTS_BR, NULL AS INITIAL_RESP_ATTEMPTS_APP, 
SUM(TCP_CONNECT_SUCCESS) AS TCP_CONNECT_SUCCESS_STR, NULL AS 
TCP_CONNECT_SUCCESS_BR, NULL AS TCP_CONNECT_SUCCESS_APP, 
SUM(TCP_CONNECT_ATTEMPTS) AS TCP_CONNECT_ATTEMPTS_STR, NULL AS 
TCP_CONNECT_ATTEMPTS_BR, NULL AS TCP_CONNECT_ATTEMPTS_APP, 
SUM(PACKETS_DL) AS PACKETS_DL_STR, NULL AS PACKETS_DL_BR, NULL AS 
PACKETS_DL_APP, SUM(PACKETS_UL) AS PACKETS_UL_STR, NULL AS 
PACKETS_UL_BR, NULL AS PACKETS_UL_APP, SUM(RETRANSMITTED_PACKETS_DL) AS 
RETRANSMITTED_PACKETS_DL_STR, NULL AS RETRANSMITTED_PACKETS_DL_BR, 
NULL AS RETRANSMITTED_PACKETS_DL_APP, SUM(RETRANSMITTED_PACKETS_DL) AS 
RETRANSMITTED_PACKETS_UL_STR, NULL AS RETRANSMITTED_PACKETS_UL_BR, 
NULL AS RETRANSMITTED_PACKETS_UL_APP, NULL AS LOAD_TIME_BR, NULL AS 
LOAD_TIME_APP, NULL AS LOAD_TIME_C_BR, NULL AS LOAD_TIME_C_APP, 
case when nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(
EVENT_START_DL as DOUBLE))) * 1000),0) < sum(nvl(DATA_TRANSFER_TIME_DL,
0)) then (nvl(round((max(CAST(EVENT_STOP_DL AS DOUBLE)) - min(CAST(
EVENT_START_DL as DOUBLE))) * 1000),0)) else SUM(DATA_TRANSFER_TIME_DL) 
end AS DATA_TRANSFER_TIME_DL_STR, NULL AS DATA_TRANSFER_TIME_DL_BR, 
NULL AS DATA_TRANSFER_TIME_DL_APP, case when nvl(round((max(CAST(
EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 
1000),0) < sum(nvl(DATA_TRANSFER_TIME_UL,0)) then nvl(round((max(CAST(
EVENT_STOP_UL AS DOUBLE)) - min(CAST(EVENT_START_UL as DOUBLE))) * 
1000),0) else SUM(DATA_TRANSFER_TIME_UL) end AS 
DATA_TRANSFER_TIME_UL_STR, NULL AS DATA_TRANSFER_TIME_UL_BR, NULL AS 
DATA_TRANSFER_TIME_UL_APP, SUM(STREAMING_RESPONSE_TIME) AS 
RESPONSE_TIME_STR, NULL AS RESPONSE_TIME_BR, NULL AS RESPONSE_TIME_APP, 
SUM(CASE WHEN NVL(STREAMING_RESPONSE_TIME_C,0) = 0 THEN CASE WHEN 
STREAMING_RESPONSE_TIME > 0 THEN 1 ELSE NULL END ELSE 
STREAMING_RESPONSE_TIME_C END) AS RESPONSE_TIME_C_STR, NULL AS 
RESPONSE_TIME_C_BR, NULL AS RESPONSE_TIME_C_APP, SUM(RTT_CLIENT) AS 
RTT_CLIENT_STR, NULL AS RTT_CLIENT_BR, NULL AS RTT_CLIENT_APP, SUM(CASE 
WHEN NVL(RTT_CLIENT_C,0) = 0 THEN CASE WHEN RTT_CLIENT > 0 THEN 1 ELSE 
NULL END ELSE RTT_CLIENT_C END) AS RTT_CLIENT_C_STR, NULL AS 
RTT_CLIENT_C_BR, NULL AS RTT_CLIENT_C_APP, SUM(RTT_SERVER) AS 
RTT_SERVER_STR, NULL AS RTT_SERVER_BR, NULL AS RTT_SERVER_APP, SUM(CASE 
WHEN NVL(RTT_SERVER_C,0) = 0 THEN CASE WHEN RTT_SERVER > 0 THEN 1 ELSE 
NULL END ELSE RTT_SERVER_C END) AS RTT_SERVER_C_STR, NULL AS 
RTT_SERVER_C_BR, NULL AS RTT_SERVER_C_APP, NULL AS LOST_PACKETS_UL_APP, 
NULL AS LOST_PACKETS_DL_APP, NULL AS LOST_PACKETS_UL_BR, NULL AS 
LOST_PACKETS_DL_BR, SUM(LOST_PACKETS_UL) AS LOST_PACKETS_UL_STR, 
SUM(LOST_PACKETS_DL) AS LOST_PACKETS_DL_STR, SUM(HTTP_METHOD_COUNT) AS 
HTTP_METHOD_COUNT_STR, SUM(case when(CATEGORY_ID=7 OR HTTP_CAUSE_CODE 
BETWEEN 400 AND 599) then NVL(HTTP_CAUSE_CODE_COUNT,0) else 0 end) AS 
HTTP_FAILURE_COUNT_STR, NULL AS EQUIP_VOLUME_UL, NULL AS 
EQUIP_VOLUME_DL, NULL AS EQUIP_DURATION_UL, NULL AS EQUIP_DURATION_DL 
from US1_BB_STREAMING_1 US_BB_STREAMING_1 where US_BB_STREAMING_1.CONTENT_TYPE in (
'VIDEO','AUDIO')  AND  
US_BB_STREAMING_1.dt < '112' group by case when TECHNOLOGY_ID = 101 then 'Cable'  
when TECHNOLOGY_ID = 102 then 'Copper'
when TECHNOLOGY_ID = 103 then 'Fiber_GFAST'
when TECHNOLOGY_ID = 104 then 'Fiber_E2E'
else TECHNOLOGY_DENORM end,EQUIP_ID,EQUIP_ID_SEQ,SUBSCRIBER_ID,
EQUIP_LATITUDE,EQUIP_LONGITUDE,CLIENT_DEVICE,CLIENT_DEVICE_TYPE,
CLIENT_DEVICE_OS,custom_decode(APPLICATION_NAME_DENORM,'Unknown',INITCAP(nvl(
APPLICATION_NAME,'Others')),APPLICATION_NAME_DENORM),
MONITORED_APP_FLAG,custom_decode(APPLICATION_CATEGORY,'Unknown',custom_decode(
CONTENT_TYPE,'AUDIO','Audio Streaming','Video Streaming'),
APPLICATION_CATEGORY),custom_decode(APP_CATEGORY_TYPE,'Unknown',
'STREAMING_TYPE',APP_CATEGORY_TYPE),REGION,CITY_ID,CITY,AREA_ID,AREA,
ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,SPARE_US_BB_1,SPARE_US_BB_2,SPARE_US_BB_3,
SPARE_US_BB_4,SPARE_US_BB_5,SPARE_US_BB_6,SPARE_US_BB_7,SPARE_US_BB_8,
SPARE_US_BB_9,SPARE_US_BB_10,SUB_TECHNOLOGY_ID,SUB_TECHNOLOGY,
DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION
) temp
group by TECHNOLOGY,nvl(EQUIP_ID,'NULL IN SOURCE'),EQUIP_ID_SEQ,
SUBSCRIBER_ID,custom_decode(EQUIP_LATITUDE,-10,NULL,EQUIP_LATITUDE),custom_decode(
EQUIP_LONGITUDE,-10,NULL,EQUIP_LONGITUDE),nvl(CLIENT_DEVICE,'NULL IN 
SOURCE'),nvl(CLIENT_DEVICE_TYPE,'NULL IN SOURCE'),
nvl(CLIENT_DEVICE_OS,'NULL IN SOURCE'),APPLICATION_NAME,custom_decode(
MONITORED_APP_FLAG,-10,0,nvl(MONITORED_APP_FLAG,0)),
APPLICATION_CATEGORY, APP_CATEGORY_TYPE,REGION,CITY_ID,CITY,AREA_ID,
AREA,ACCESS_NODE_ID,ACCESS_NODE_NAME,ACCESS_NODE_LATITUDE,
ACCESS_NODE_LONGITUDE,HUB_ID,HUB_NAME,HUB_LATITUDE,HUB_LONGITUDE,
EXCHANGE_ID,EXCHANGE_NAME,EXCHANGE_LATITUDE,EXCHANGE_LONGITUDE,
EQUIP_MODEL,EQUIP_VENDOR,DEVICE_CAPABILITY,SUBS_TYPE,
CUSTOMER_SEGMENTATION,CUSTOMER_SUBCATEGORY,GROUP_NAME,PARENT_GROUP_NAME,
ASSOCIATION_NAME,nvl(SPARE_PS_BB_SEGG_1,'Unknown'), 
nvl(SPARE_PS_BB_SEGG_2,'Unknown'), nvl(SPARE_PS_BB_SEGG_3,
'Unknown'),nvl(SPARE_PS_BB_SEGG_4,'Unknown'), 
nvl(SPARE_PS_BB_SEGG_5,'Unknown'), nvl(SPARE_PS_BB_SEGG_6,
'Unknown'), nvl(SPARE_PS_BB_SEGG_7,'Unknown'),
nvl(SPARE_PS_BB_SEGG_8,'Unknown'), nvl(SPARE_PS_BB_SEGG_9,
'Unknown'), nvl(SPARE_PS_BB_SEGG_10,'Unknown'),SUB_TECHNOLOGY_ID,
SUB_TECHNOLOGY,DEVICE_EQUIP_ID,DEVICE_SOFTWAREVERSION"""  # noqa E501

        query = self.remove_quotes(TestQueryParser.INPUT_QUERY_3)
        qp = QueryParser(self.parsed_query(query))
        actual_query = qp.query
        self.assertEqual(expected_query, actual_query)


if __name__ == "__main__":
    unittest.main()
