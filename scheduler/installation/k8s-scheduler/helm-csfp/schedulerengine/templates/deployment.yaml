apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "schedulerengine.fullname" . }}
  labels:
    app: {{ template "schedulerengine.fullname" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: "{{ .Release.Namespace }}"
    env: "{{ .Values.application.environment }}"
    component: "{{ .Values.application.tier }}"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 60
  selector:
    matchLabels:
      app: {{ template "schedulerengine.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "schedulerengine.fullname" . }}
        chart: {{ template "schedulerengine.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        namespace: "{{ .Release.Namespace }}"
        env: "{{ .Values.application.environment }}"
        component: "{{ .Values.application.tier }}"
        version: {{ template "schedulerengine.version" . }}
    spec:
      serviceAccountName: {{ template "schedulerengine.fullname" . }}
{{- if .Values.is_kerberos_enabled }}
      initContainers:
        - name: krb5-admin-init
          image: "{{ .Values.global.registry3 }}/{{ .Values.kadmin.image.name }}:{{ .Values.kadmin.image.tag }}"
          imagePullPolicy: "{{ .Values.kadmin.image.pullPolicy }}"
          resources:
            requests:
              cpu: "0.05"
              memory: "5Mi"
            limits:
              cpu: "0.1"
              memory: "50Mi"
          volumeMounts:
            - name: krb5-config-volume
              mountPath: {{ .Values.kerberos.krb5ConfigVolumeMountPath }}
              subPath: krb5.conf
            - name: shared-data
              mountPath: {{ .Values.kerberos.sharedDataMountPath }}
          env:
            - name: KRB_NAMESPACE
              value: {{ .Release.Namespace }}          
            - name: KRB5_OS_USER
              value: "{{ .Values.krb5.os_user }}"
            - name: KRB5_SECRET_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-username
            - name: KRB5_SECRET_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-passwd
{{- end }}
{{- if .Values.global.is_nodeaffinity_enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: is_worker
                operator: In
                values:
                - "true"
              - key: nodeType
                operator: NotIn
                values:
                - kf-enable
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  release: {{ .Release.Name | quote }}
                  app: {{ template "schedulerengine.fullname" . }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.global.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory | quote }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory | quote }}
              cpu: {{ .Values.resources.limits.cpu | quote }}
          env:
            - name: JAVA_OPTS
              value: {{ .Values.jvm.options }}
            - name: JAVA_APP_OPTS
              value: {{ .Values.jvm.appOptions }}
            - name: IS_K8S
              value: "{{ .Values.k8.enabled }}"
            - name: ENABLE_PROMETHEUS
              value: "{{ .Values.prometheus.enabled }}"
{{- if .Values.cdlk.enabled }}
            - name: HADOOP_CONF_DIR
              value: {{ .Values.app.hadoopConfDir }}
{{- end }}
            - name: connection_pooling_enabled
              value: "{{ .Values.hiveConfigProperties.connection_pooling_enabled }}"
            - name: db_driver
              value: {{ .Values.hiveConfigProperties.db_driver }}
            - name: custom_db_url
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: HIVE_CUSTOMISATION_URL
            - name: PROJECT_HISTORYSERVER_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_HISTORYSERVER_ADDRESS
            - name: PROJECT_SPARK_EVENTLOG_DIRECTORY
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_SPARK_EVENTLOG_DIRECTORY
{{- if .Values.cdlk.enabled }}
            - name: HIVE_JDBC_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.hiveConfigMapAccess }}
                  key: HIVE_JDBC_URL
            - name: HIVE_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.hiveConfigMapAccess }}
                  key: HIVE_HOST
            - name: HIVE_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.hiveConfigMapAccess }}
                  key: HIVE_PORT
{{- end }}
            - name: IDLE_CONNECTION_TEST_PERIOD_IN_MINUTES
              value: "{{ .Values.hiveConfigProperties.IDLE_CONNECTION_TEST_PERIOD_IN_MINUTES }}"
            - name: IDLE_CONNECTION_TEST_SQL
              value: "{{ .Values.hiveConfigProperties.IDLE_CONNECTION_TEST_SQL }}"
            - name: max_connections
              value: "{{ .Values.hiveConfigProperties.max_connections }}"
            - name: min_connections
              value: "{{ .Values.hiveConfigProperties.min_connections }}"
            - name: hive_username
              value: "{{ .Values.hiveConfigProperties.hive_username }}"
            - name: INGRESS_PATH
              value: {{ template "schedulerengine.ingress" . }}
            - name: BUSYBOX_IMAGE_PATH
              value: "{{ .Values.global.registry1 }}/{{ .Values.imageBusyBox.name }}:{{ .Values.imageBusyBox.tag }}"
            - name: BUSYBOX_IMAGE_PULL_POLICY
              value: "{{ .Values.imageBusyBox.pullPolicy }}"
            - name: CRON_NAMESPACE
              value: "{{ .Release.Namespace }}"
            - name: CRON_RELEASENAME
              value: "{{ .Release.Name }}"
            - name: CRON_SERVICEACCOUNT
              value: "{{ template "schedulerengine.fullname" . }}"
            - name: SERVICE_PORT
              value: "{{ .Values.service.port }}"  
            - name: COMPONENT_GROUP
              value: "{{ template "schedulerengine.fullname" . }}"
            - name: TOPOLOGY_REFRESH_ENDPOINT
              value: "http://{{ .Values.etlconfigservice.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.etlconfigservice.port }}/api/etl/v1/dimensions"
            - name: CACHESERVICE_AGENT_ENDPOINT
              value: "http://{{ .Values.cacheserviceagent.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.cacheserviceagent.port }}/api/agent/v1/dimensions"
            - name: CACHE_SERVICE_READ_TIMEOUT_MINUTES
              value: "{{ .Values.cacheserviceagent.readtimeout }}"
            - name: QUERY_scheduler_ENDPOINT
              value: "http://{{ .Values.queryschedulerservice.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.queryschedulerservice.port }}/api/qs/v1/queries"
            - name: QUERY_scheduler_READ_TIMEOUT_MINUTES
              value: "{{ .Values.queryschedulerservice.readtimeout }}"
            - name: DATA_AVAILABILITY_CACHESERVICE_ENDPOINT
              value: "http://{{ .Values.cacheserviceagent.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.cacheserviceagent.port }}/api/agent/v1/data-availability"
            - name: DIMENSION_FILE_VALIDATOR_ENDPOINT
              value: "http://{{ .Values.dimensionfilevalidator.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.dimensionfilevalidator.port }}/api/validator/v1/dimensions/validation"
            - name: EXPORTSERVICE_ENDPOINT
              value: "http://{{ .Values.exportservice.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.exportservice.port }}/api/executor/v1/jobs/export"  
            - name: DB_SCHEMA
              {{ if .Values.database.enabled }}
              value: "{{ .Values.database.schemaName }}"
              {{ end }}
            - name: PROJECT_SDK_DB_URL
              {{- if eq .Values.application.environment "test" }}
              value: {{ .Values.app.testPostgresUrl }}
              {{- else }}
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_SDK_DB_URL
              {{- end }}
            - name: PROJECT_SDK_DB_USERNAME
              value: {{ .Values.app.sdkDBUserName }}
            - name: QUERY_SETTINGS_CONFIGMAP_NAME
              value: "{{ .Values.app.seConfigMapName }}"
            - name: RELEASE_NAMESPACE
              value: "{{ .Release.Namespace }}"
            - name: HIVE_SETTINGS_KEY
              value: {{ .Values.querySettingsFileName.hive }}
            - name: PORTAL_SERVICE_ENDPOINT
              value: "http://{{ .Values.portal.service.name }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.portal.service.port }}/api/cct/design/props/v1/{{ .Values.portal.application }}"
            - name: KEYCLOAK_SERVICE_ENDPOINT
              value: "https://{{ template "portal-admin-usecases.keycloak.service.fullname" . }}.{{ .Values.keycloak.namespace }}.svc.cluster.local:{{ .Values.keycloak.service.port }}/auth/realms/{{ .Values.keycloak.realm }}/protocol/openid-connect/token" 
            - name: KEYCLOAK_REALM_NAME
              value: "{{ .Values.keycloak.realm }}"
            - name: KEYCLOAK_CLIENT_ID
              value: "{{ .Values.keycloak.clientId }}"
            - name: KEYCLOAK_TOKEN
              value: "{{ .Values.keycloak.token }}"
            - name: FULL_OUTAGE_HEALTH_CHECK_MINUTES_INTERVAL
              value: "{{ .Values.health.fullOutageInterval }}"
            - name: FOLDER_MODIFICATION_MINUTES_THRESHOLD
              value: "{{ .Values.health.folderModificationThreshold }}"
            - name: HIVE_HDFS_ERROR_DESCRIPTIONS
              value: "{{ .Values.health.hiveHdfsErrorList }}"
            - name: HIERARCHY_GROUP_NAMES
              value: "{{ .Values.portalService.groupNames }}"
            - name: SPARK_SETTINGS_KEY
              value: {{ .Values.querySettingsFileName.spark }}
            - name: HADOOP_FILEREADER
{{- $format := default .Values.database.hadoopFileFormat | upper -}}
{{- if and (.Values.database.hadoopFileFormat) (eq $format "PARQUET") }}
              value: "com.project.rithomas.common.hive.io.reader.ParquetFileReader"
{{- else }}
              value: "com.project.rithomas.common.hive.io.reader.ORCFileReader"
{{- end }}
            - name: VAULT_SECRET_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: VAULT_SECRET_URL
{{- if .Values.is_kerberos_enabled }}
            - name: KRB5CCNAME
              value: "/tmp/krb5-credentials/krb5cc_user"
            - name: KEYTAB_LOCATION
              value: "/tmp/krb5-credentials/rithomas.keytab"
            - name: POD_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PRINCIPAL
              value: "{{ .Values.krb5.os_user }}/$(POD_HOSTNAME)@{{ .Values.realm }}"
{{- end }}
            - name: ENABLE_DEBUG_FOR_K8S_API_CLIENT
              value: "{{ .Values.app.enableDebugForApiClient }}"
            - name: DIM_WRITE_BATCH_SIZE
              value: {{ .Values.dimension.writeBatchSize | quote }}
          volumeMounts:
{{- if .Values.cdlk.enabled }}          
            - name: hadoop-client-properties
              mountPath: "{{ .Values.app.hadoopConfDir }}"
            - name: yarn-client-properties
              mountPath: "{{ .Values.app.yarnConfDir }}"
{{- end }}
            - name: query-settings
              mountPath: "{{ .Values.app.querySettingsConfDir }}"
            - name: {{ .Values.volumegfs.name | quote }}
              mountPath: {{ .Values.volumegfs.mountpath | quote }}
            - name: vault-token
              mountPath: /etc/pmm/token
{{- if .Values.is_kerberos_enabled }}
            - name: shared-data
              mountPath: {{ .Values.kerberos.sharedDataMountPath }}
            - name: krb5-config-volume
              mountPath: {{ .Values.kerberos.krb5ConfigVolumeMountPath }}
              subPath: krb5.conf
{{- end }}
{{- if .Values.timezone.enabled }}
            - name: timezone-config
              mountPath: /etc/localtime
              readOnly: true
{{- end }}
{{- if .Values.cdlk.tls.enabled }}
            - name: cdlk-tls-secret
              mountPath: {{ .Values.cdlk.tls.cert_path }}
{{- end }}   
          ports:
            - name: http
              containerPort: {{ .Values.httpPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /application/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 50
            timeoutSeconds: 100
          readinessProbe:
            httpGet:
              path: /application/health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 50
            timeoutSeconds: 100
{{- if .Values.is_kerberos_enabled }}
        - name: krb5-tgt-init
          image: "{{ .Values.global.registry3 }}/{{ .Values.kinit.image.name }}:{{ .Values.kinit.image.tag }}"
          imagePullPolicy: "{{ .Values.kinit.image.pullPolicy }}"
          resources:
            requests:
              cpu: {{ .Values.krb.requests.cpu | quote }}
              memory: {{ .Values.krb.requests.memory | quote }}
            limits:
              cpu: {{ .Values.krb.limits.cpu | quote }}
              memory: {{ .Values.krb.limits.memory | quote }}
          volumeMounts:
            - name: krb5-config-volume
              mountPath: {{ .Values.kerberos.krb5ConfigVolumeMountPath }}
              subPath: krb5.conf
            - name: shared-data
              mountPath: {{ .Values.kerberos.sharedDataMountPath }}
          env:
            - name: KRB_NAMESPACE
              value: {{ .Release.Namespace }}          
            - name: KRB5_OS_USER
              value: "{{ .Values.krb5.os_user }}"
            - name: KRB5_CRON_EXPRESSION
              value: "{{ .Values.kinit.cron.expression }}"
            - name: KRB_COMPONENT
              value: {{ template "schedulerengine.fullname" . }}
            - name: KRB5_SECRET_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-username
            - name: KRB5_SECRET_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-passwd
{{- end }}
      volumes:
{{- if .Values.cdlk.enabled }}
      - name: hadoop-client-properties
        configMap:
          name: {{ .Values.app.hadoopConfigMap }}
      - name: yarn-client-properties
        configMap:
          name: {{ .Values.app.hiveConfigMapAccess }}
{{- end }}
      - name: apaas-cdlk-access
        configMap:
          name: {{ .Values.app.hiveConfigMapAccess }}
      - name: ca4ci-ext-endpoints
        configMap:
          name: {{ .Values.app.configMap.extEndpoints.name }}
      - name: query-settings
        configMap:
          name: "{{ .Values.app.seConfigMapName }}"
      - name: {{ .Values.volumegfs.name | quote }}
        glusterfs:
          endpoints: {{ .Values.glusterfs.endpoints | quote }}
          path: {{ .Values.glusterfs.path | quote }}
      - name: vault-token
        secret:
          secretName: {{ .Values.app.secret.vault.name }}
          items:
           - key: PROJECT_VAULT_TOKEN
             path: vault.token
{{- if .Values.is_kerberos_enabled }}
      - name: krb5-config-volume
        configMap:
          defaultMode: 420
          name: {{ .Values.krb5.configmap }}
      - name: shared-data
        emptyDir: {}
{{- end }}
{{- if .Values.timezone.enabled }}
      - name: timezone-config
        hostPath:
          path: /usr/share/zoneinfo/{{ .Values.timezone.localtimezone }}
{{- end }}
{{- if .Values.cdlk.tls.enabled }}
      - name: cdlk-tls-secret
        secret:
          defaultMode: 420
          items:
          - key: jssecacerts
            path: jssecacerts
          secretName: {{ .Values.cdlk.tls.secret_name }}
{{- end }}
{{- if .Values.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
        allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
{{- end }}
