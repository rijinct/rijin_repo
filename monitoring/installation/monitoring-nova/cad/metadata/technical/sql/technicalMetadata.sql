select query_to_xml('select * from (select TableName,table_description,ColumnName,level,Definition,Datatype,Formula,unik,readByList,writtenByList,jobIdList,interval,max(sequence) as sequence from (select * from (select m1.TableName,m1.table_description,m1.ColumnName,level,m1.Definition,m1.Datatype,CASE WHEN (m1.Formula like ''msisdn_normalize%'' or m1.Formula like ''denorm%'' or m1.Formula is null) THEN m1.ColumnName ELSE m1.Formula END as Formula  ,unik,sequence,n5.readByList,n6.writtenByList,n6.jobIdList,n8.interval from ((select TableName,table_description,ColumnName,''US'' as level,Definition,Datatype,Formula,unik,sequence from (select ''US_'' || n1.specid|| ''_1'' as TableName,n1.description as table_description,n2.name as ColumnName,n2.Datatype,n2.description as Definition, n2.derivationformula as Formula,n2.unik as unik,sequence from ((select id,specid,description from sairepo.usage_spec)n1 join (select usagespecid,sequence,name,description,CASE WHEN (dbdatatype=''bigint'' and valuetypeprecision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,valuetypeprecision,derivationformula,unik from (select usagespecid,sequence,name,description,CASE WHEN valuetypeprecision=''Decimal'' THEN ''decimal'' ELSE dbdatatype END as dbdatatype,valuetypeprecision,derivationformula,unik from (select usage_spec_char_use.usagespecid as usagespecid,usage_spec_char_use.sequence as sequence,char_spec.name as name,char_spec.description as description,char_spec.valuetype as pgDataType,char_spec.valuetypeprecision as valuetypeprecision, char_spec.derivationformula as derivationformula,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.usage_spec_char_use on char_spec.id=usage_spec_char_use.usagespeccharid where usage_spec_char_use.usagespecid in  (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.usage_spec where abstract=''DERIVED''  or abstract is null group by specid)u1)u2 
join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.usage_spec)u3 on u2.specid_version=u3.specid_version) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))n4 join sairepo.generic_data_type on n4.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n5) n2 on n1.id=n2.usagespecid) order by n2.usagespecid,n2.sequence)n3)
union all
(select ''PS_''|| n2.specid || ''_1_15MIN'' as TableName,n2.description as table_description, ColumnName, ''PS'' as level ,Definition,DataType,Formula,unik,sequence from (((select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,unik from (select ColumnName,pgDataType,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,precision,Definition,Formula,sequence,perfspecid,unik from (select char_spec.name as ColumnName, char_spec.valuetype as pgDataType, char_spec.valuetypeprecision as precision,char_spec.description as Definition,char_spec.derivationformula as Formula,perf_spec_attributes_use.sequence,perf_spec_attributes_use.perfspecid as perfspecid,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.perf_spec_attributes_use on char_spec.id=perf_spec_attributes_use.charspecid where perf_spec_attributes_use.perfspecid in (select max_id from (select u3.id as max_id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version)u4 join sairepo.perf_spec_attributes_use on perf_spec_attributes_use.perfspecid=u4.max_id where perf_spec_attributes_use.intervalid=5) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))o1 join sairepo.generic_data_type on o1.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')o2) 
union all 
(select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,null from (select ColumnName,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,pgDataType,precision,Definition,Formula,sequence,perfspecid from (select perf_indi_spec.pi_spec_name as ColumnName,perf_indi_spec.valuetype as pgDataType,perf_indi_spec.valuetypeprecision as precision,perf_indi_spec.description  as Definition,perf_indi_spec.derivationmethod as Formula,perf_spec_attributes_use.sequence as sequence,perf_spec_attributes_use.perfspecid as perfspecid from sairepo.perf_indi_spec  join sairepo.perf_spec_attributes_use on perf_indi_spec.id=perf_spec_attributes_use.perfindicatorspecid and (perf_spec_attributes_use.intervalid=5 and (istransient is null or istransient=false)) where perf_spec_attributes_use.perfspecid in (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version))n2 join sairepo.generic_data_type on n2.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n3))n1 join sairepo.perf_spec n2 on n2.id=n1.perfspecid )order by perfspecid,sequence)
union all
(select ''PS_''|| n2.specid || ''_1_HOUR'' as TableName,n2.description as table_description, ColumnName, ''PS'' as level ,Definition,DataType,Formula,unik,sequence from (((select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,unik from (select ColumnName,pgDataType,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,precision,Definition,Formula,sequence,perfspecid,unik from (select char_spec.name as ColumnName, char_spec.valuetype as pgDataType, char_spec.valuetypeprecision as precision,char_spec.description as Definition,char_spec.derivationformula as Formula,perf_spec_attributes_use.sequence,perf_spec_attributes_use.perfspecid as perfspecid,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.perf_spec_attributes_use on char_spec.id=perf_spec_attributes_use.charspecid where perf_spec_attributes_use.perfspecid in (select max_id from (select u3.id as max_id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version)u4 join sairepo.perf_spec_attributes_use on perf_spec_attributes_use.perfspecid=u4.max_id where perf_spec_attributes_use.intervalid=1) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))o1 join sairepo.generic_data_type on o1.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')o2) 
union all 
(select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,null from (select ColumnName,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,pgDataType,precision,Definition,Formula,sequence,perfspecid from (select perf_indi_spec.pi_spec_name as ColumnName,perf_indi_spec.valuetype as pgDataType,perf_indi_spec.valuetypeprecision as precision,perf_indi_spec.description  as Definition,perf_indi_spec.derivationmethod as Formula,perf_spec_attributes_use.sequence as sequence,perf_spec_attributes_use.perfspecid as perfspecid from sairepo.perf_indi_spec  join sairepo.perf_spec_attributes_use on perf_indi_spec.id=perf_spec_attributes_use.perfindicatorspecid and (perf_spec_attributes_use.intervalid=1 and (istransient is null or istransient=false)) where perf_spec_attributes_use.perfspecid in (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version))n2 join sairepo.generic_data_type on n2.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n3))n1 join sairepo.perf_spec n2 on n2.id=n1.perfspecid )order by perfspecid,sequence)
union all
(select ''PS_''|| n2.specid || ''_1_DAY'' as TableName,n2.description as table_description, ColumnName, ''PS'' as level ,Definition,DataType,Formula,unik,sequence from (((select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,unik from (select ColumnName,pgDataType,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,precision,Definition,Formula,sequence,perfspecid,unik from (select char_spec.name as ColumnName, char_spec.valuetype as pgDataType, char_spec.valuetypeprecision as precision,char_spec.description as Definition,char_spec.derivationformula as Formula,perf_spec_attributes_use.sequence,perf_spec_attributes_use.perfspecid as perfspecid,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.perf_spec_attributes_use on char_spec.id=perf_spec_attributes_use.charspecid where perf_spec_attributes_use.perfspecid in (select max_id from (select u3.id as max_id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version)u4 join sairepo.perf_spec_attributes_use on perf_spec_attributes_use.perfspecid=u4.max_id where perf_spec_attributes_use.intervalid=2) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))o1 join sairepo.generic_data_type on o1.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')o2) 
union all 
(select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,null from (select ColumnName,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,pgDataType,precision,Definition,Formula,sequence,perfspecid from (select perf_indi_spec.pi_spec_name as ColumnName,perf_indi_spec.valuetype as pgDataType,perf_indi_spec.valuetypeprecision as precision,perf_indi_spec.description  as Definition,perf_indi_spec.derivationmethod as Formula,perf_spec_attributes_use.sequence as sequence,perf_spec_attributes_use.perfspecid as perfspecid from sairepo.perf_indi_spec  join sairepo.perf_spec_attributes_use on perf_indi_spec.id=perf_spec_attributes_use.perfindicatorspecid and (perf_spec_attributes_use.intervalid=2 and (istransient is null or istransient=false)) where perf_spec_attributes_use.perfspecid in (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version))n2 join sairepo.generic_data_type on n2.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n3))n1 join sairepo.perf_spec n2 on n2.id=n1.perfspecid )order by perfspecid,sequence)
union all
(select ''PS_''|| n2.specid || ''_1_WEEK'' as TableName,n2.description as table_description, ColumnName, ''PS'' as level ,Definition,DataType,Formula,unik,sequence from (((select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,unik from (select ColumnName,pgDataType,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,precision,Definition,Formula,sequence,perfspecid,unik from (select char_spec.name as ColumnName, char_spec.valuetype as pgDataType, char_spec.valuetypeprecision as precision,char_spec.description as Definition,char_spec.derivationformula as Formula,perf_spec_attributes_use.sequence,perf_spec_attributes_use.perfspecid as perfspecid,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.perf_spec_attributes_use on char_spec.id=perf_spec_attributes_use.charspecid where perf_spec_attributes_use.perfspecid in (select max_id from (select u3.id as max_id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version)u4 join sairepo.perf_spec_attributes_use on perf_spec_attributes_use.perfspecid=u4.max_id where perf_spec_attributes_use.intervalid=3) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))o1 join sairepo.generic_data_type on o1.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')o2) 
union all 
(select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,null from (select ColumnName,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,pgDataType,precision,Definition,Formula,sequence,perfspecid from (select perf_indi_spec.pi_spec_name as ColumnName,perf_indi_spec.valuetype as pgDataType,perf_indi_spec.valuetypeprecision as precision,perf_indi_spec.description  as Definition,perf_indi_spec.derivationmethod as Formula,perf_spec_attributes_use.sequence as sequence,perf_spec_attributes_use.perfspecid as perfspecid from sairepo.perf_indi_spec  join sairepo.perf_spec_attributes_use on perf_indi_spec.id=perf_spec_attributes_use.perfindicatorspecid and (perf_spec_attributes_use.intervalid=3 and (istransient is null or istransient=false)) where perf_spec_attributes_use.perfspecid in (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version))n2 join sairepo.generic_data_type on n2.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n3))n1 join sairepo.perf_spec n2 on n2.id=n1.perfspecid )order by perfspecid,sequence)
union all
(select ''PS_''|| n2.specid || ''_1_MONTH'' as TableName,n2.description as table_description, ColumnName, ''PS'' as level ,Definition,DataType,Formula,unik,sequence from (((select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,unik from (select ColumnName,pgDataType,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,precision,Definition,Formula,sequence,perfspecid,unik from (select char_spec.name as ColumnName, char_spec.valuetype as pgDataType, char_spec.valuetypeprecision as precision,char_spec.description as Definition,char_spec.derivationformula as Formula,perf_spec_attributes_use.sequence,perf_spec_attributes_use.perfspecid as perfspecid,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.perf_spec_attributes_use on char_spec.id=perf_spec_attributes_use.charspecid where perf_spec_attributes_use.perfspecid in (select max_id from (select u3.id as max_id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version)u4 join sairepo.perf_spec_attributes_use on perf_spec_attributes_use.perfspecid=u4.max_id where perf_spec_attributes_use.intervalid=4) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))o1 join sairepo.generic_data_type on o1.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')o2) 
union all 
(select ColumnName,CASE WHEN (dbdatatype=''bigint'' and precision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,Definition,Formula,sequence,perfspecid,null from (select ColumnName,CASE WHEN precision like ''%Decimal%'' THEN ''decimal'' ELSE generic_data_type.dbdatatype END as dbdatatype,pgDataType,precision,Definition,Formula,sequence,perfspecid from (select perf_indi_spec.pi_spec_name as ColumnName,perf_indi_spec.valuetype as pgDataType,perf_indi_spec.valuetypeprecision as precision,perf_indi_spec.description  as Definition,perf_indi_spec.derivationmethod as Formula,perf_spec_attributes_use.sequence as sequence,perf_spec_attributes_use.perfspecid as perfspecid from sairepo.perf_indi_spec  join sairepo.perf_spec_attributes_use on perf_indi_spec.id=perf_spec_attributes_use.perfindicatorspecid and (perf_spec_attributes_use.intervalid=4 and (istransient is null or istransient=false)) where perf_spec_attributes_use.perfspecid in (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.perf_spec group by specid)u1)u2 join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.perf_spec)u3 on u2.specid_version=u3.specid_version))n2 join sairepo.generic_data_type on n2.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n3))n1 join sairepo.perf_spec n2 on n2.id=n1.perfspecid )order by perfspecid,sequence))m1
JOIN
(select string_agg(job_list.table_name,'','') as readByList,paramvalue from sairepo.job_list join
(select job_dictionary.jobid as jobid,job_prop.paramvalue as paramvalue from sairepo.job_dictionary join sairepo.job_prop on job_dictionary.id = job_prop.jobid and job_prop.paramname=''SOURCE'')n4 on job_list.jobid=n4.jobid group by n4.paramvalue order by n4.paramvalue)n5 on n5.paramvalue ilike ''%'' || m1.TableName || ''%''
JOIN
(select string_agg(paramvalue,'','') as writtenByList ,string_agg(job_list.jobid,'','') as jobIdList,table_name from sairepo.job_list join
(select job_dictionary.jobid as jobid,job_prop.paramvalue as paramvalue from sairepo.job_dictionary join sairepo.job_prop on job_dictionary.id = job_prop.jobid and job_prop.paramname=''SOURCE'')n5 on job_list.jobid=n5.jobid group by job_list.table_name)n6 on m1.TableName=n6.table_name
JOIN
(select paramvalue as interval,table_name from sairepo.job_prop join (select job_dictionary.id as id,job_list.table_name as table_name from sairepo.job_dictionary join sairepo.job_list on job_dictionary.jobid=job_list.jobid)n7 on job_prop.jobid=n7.id where paramname=''PLEVEL'')n8 on m1.TableName=n8.table_name
union all 
(select ''ES_'' || n1.specid|| ''_1'' as TableName,n1.description as table_description,n2.name as ColumnName,''ES'' as level,n2.description as Definition,n2.DataType as Datatype, n2.derivationformula as Formula,n2.unik as unik,sequence, '''' as readByList,'''' as writtenByList,'''' as jobIdList,'''' as interval from ((select id,specid,description from sairepo.entity_spec)n1 join (select entityspecid,sequence,name,description,CASE WHEN (dbdatatype=''bigint'' and valuetypeprecision like ''%,%'') THEN ''double'' ELSE dbdatatype END as DataType,valuetypeprecision,derivationformula,unik from (select entityspecid,sequence,name,description,CASE WHEN valuetypeprecision=''Decimal'' THEN ''decimal'' ELSE dbdatatype END as dbdatatype,valuetypeprecision,derivationformula,unik from (select entity_spec_char_use.entityspecid as entityspecid,entity_spec_char_use.sequence as sequence,char_spec.name as name,char_spec.description as description,char_spec.valuetype as pgDataType,char_spec.valuetypeprecision as valuetypeprecision, char_spec.derivationformula as derivationformula,(case when char_spec.unik=''Unique'' then ''PK'' else '''' end) as unik from sairepo.char_spec join sairepo.entity_spec_char_use on char_spec.id=entity_spec_char_use.entityspeccharid where entity_spec_char_use.entityspecid in  (select u3.id from (select u1.specid as specid,u1.version as version,concat(u1.specid,''_'',u1.version) as specid_version from (select specid,max(cast(version as int)) as version from sairepo.entity_spec where abstract=''DERIVED''  or abstract is null group by specid)u1)u2 
join (select id,specid,concat(specid,''_'',version) as specid_version from sairepo.entity_spec)u3 on u2.specid_version=u3.specid_version) and (upper(char_spec.abstract)=''DERIVED'' or char_spec.abstract is null))n4 join sairepo.generic_data_type on n4.pgDataType=generic_data_type.genericdatatype where generic_data_type.dbtype=''NGDB'')n5) n2 on n1.id=n2.entityspecid) order by n2.entityspecid,n2.sequence))m2 where #FILTER_CONDITION)o1 group by TableName,table_description,ColumnName,level,Definition,Datatype,Formula,unik,readByList,writtenByList,jobIdList,interval)o2 order by sequence',FALSE,FALSE,'')