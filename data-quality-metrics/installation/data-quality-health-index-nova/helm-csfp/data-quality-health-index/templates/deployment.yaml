apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ template "dqhi.fullname" . }}
  labels:
    app: {{ template "dqhi.fullname" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    namespace: "{{ .Release.Namespace }}"
    env: "{{ .Values.application.environment }}"
    component: "{{ .Values.application.tier }}"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  minReadySeconds: 60
  selector:
    matchLabels:
      app: {{ template "dqhi.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "dqhi.fullname" . }}
        chart: {{ template "dqhi.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        namespace: "{{ .Release.Namespace }}"
        env: "{{ .Values.application.environment }}"
        component: "{{ .Values.application.tier }}"
        version: {{ template "dqhi.version" . }}
    spec:
      serviceAccountName: {{ template "dqhi.fullname" . }}
      initContainers:
{{- if .Values.is_kerberos_enabled }}
        - name: krb5-admin-init
          image: "{{ .Values.global.registry3 }}/{{ .Values.kadmin.image.name }}:{{ .Values.kadmin.image.tag }}"
          imagePullPolicy: "{{ .Values.kadmin.image.pullPolicy }}"
          resources:
            requests:
              cpu: "0.05"
              memory: "5Mi"
            limits:
              cpu: "0.1"
              memory: "20Mi"
          volumeMounts:
            - name: krb5-config-volume
              mountPath: {{ .Values.kerberos.krb5ConfigVolumeMountPath }}
              subPath: krb5.conf
            - name: shared-data
              mountPath: {{ .Values.kerberos.sharedDataMountPath }}
          env:
            - name: KRB_NAMESPACE
              value: {{ .Release.Namespace }}            
            - name: KRB5_OS_USER
              value: "{{ .Values.krb5.os_user }}"
            - name: KRB5_SECRET_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-username
            - name: KRB5_SECRET_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-passwd
{{- end }}
{{- if .Values.global.is_nodeaffinity_enabled }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: is_worker
                operator: In
                values:
                - "true"
              - key: nodeType
                operator: NotIn
                values:
                - kf-enable
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  release: {{ .Release.Name | quote }}
                  app: {{ template "dqhi.fullname" . }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.global.registry2 }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              memory: {{ .Values.resources.requests.memory | quote }}
              cpu: {{ .Values.resources.requests.cpu }}
            limits:
              memory: {{ .Values.resources.limits.memory | quote }}
              cpu: {{ .Values.resources.limits.cpu | quote }}
          livenessProbe:
            exec:
              command:
              - cat
              - /opt/spark/python/run-tests.py
            initialDelaySeconds: 30
            periodSeconds: 50
          readinessProbe:
            exec:
              command:
              - cat
              - /opt/spark/python/run-tests.py
            initialDelaySeconds: 30
            periodSeconds: 50
          env:
            - name: IS_K8S
              value: "{{ .Values.k8.enabled }}"
            - name: LOCAL_TZ
              value: {{ .Values.timezone.localtimezone }}
            - name: connection_pooling_enabled
              value: "{{ .Values.hiveConfigProperties.connection_pooling_enabled }}"
            - name: db_driver
              value: {{ .Values.hiveConfigProperties.db_driver }}            
{{- if .Values.cdlk.enabled }}
            - name: HIVE_JDBC_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.hiveConfigMapAccess }}
                  key: HIVE_JDBC_URL
            - name: HIVE_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.hiveConfigMapAccess }}
                  key: HIVE_HOST
            - name: HIVE_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.hiveConfigMapAccess }}
                  key: HIVE_PORT
            - name: IDLE_CONNECTION_TEST_PERIOD_IN_MINUTES
              value: "{{ .Values.hiveConfigProperties.IDLE_CONNECTION_TEST_PERIOD_IN_MINUTES }}"
            - name: IDLE_CONNECTION_TEST_SQL
              value: "{{ .Values.hiveConfigProperties.IDLE_CONNECTION_TEST_SQL }}"
            - name: max_connections
              value: "{{ .Values.hiveConfigProperties.max_connections }}"
            - name: min_connections
              value: "{{ .Values.hiveConfigProperties.min_connections }}"
            - name: HADOOP_CONF_DIR
              value: {{ .Values.app.hadoopConfDir }}
            - name: HIVE_CONF_DIR
              value: {{ .Values.app.hiveConfDir }}
{{- end }}
            - name: INGRESS_PATH
              value: {{ template "dqhi.ingress" . }}
            - name: hive_username
              value: "{{ .Values.hiveConfigProperties.hive_username }}"
            - name: DB_SCHEMA
              {{ if .Values.database.enabled }}
              value: "{{ .Values.database.schemaName }}"
              {{ end }}
            - name: PROJECT_SDK_DB_URL
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_SDK_DB_URL
            - name: DQHI_SPARK_CONF
              valueFrom:
                configMapKeyRef:
                  name: {{ template "dqhi.fullname" . }}-settings
                  key: SPARK_CONFIG
            - name: DATA_RETENTION_IN_DAYS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "dqhi.fullname" . }}-settings
                  key: DATA_RETENTION_IN_DAYS
            - name: MAX_START_DATE_RANGE
              valueFrom:
                configMapKeyRef:
                  name: {{ template "dqhi.fullname" . }}-settings
                  key: MAX_START_DATE_RANGE
            - name: PROJECT_POP3_SERVER_IP
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_POP3_SERVER_IP
            - name: PROJECT_SMTP_SENDER_EMAILID
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_SMTP_SENDER_EMAILID
            - name: PROJECT_SMTP_RECEIVER_EMAILIDS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: PROJECT_SMTP_RECEIVER_EMAILIDS
            - name: PROJECT_HIVE_METASTORE_IP
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: HIVEMETA_FIP
            - name: PROJECT_HIVE_METASTORE_DB
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.app.configMap.extEndpoints.name }}
                  key: HIVEMETA_DB
            - name: PROJECT_HIVE_METASTORE_USERNAME
              value: {{ .Values.app.hiveMetastoreUserName }}
            - name: PROJECT_HIVE_METASTORE_PASSWORD
              value: {{ .Values.app.hiveMetastorePassword }}
            - name: PROJECT_HIVE_METASTORE_PORT
              value: "{{ .Values.app.hiveMetastorePort }}"
            - name: PROJECT_SDK_DB_USERNAME
              value: {{ .Values.app.sdkDBUserName }}
            - name: PROJECT_SDK_DB_DRIVER
              value: {{ .Values.app.sdkDBDriver }}
            - name: PROJECT_SDK_SCHEMA_NAME
              value: {{ .Values.app.sdkSchemaName }}
            - name: OUTPUT_DQHI_PATH
              value: "{{ .Values.persistence.outputMountPath }}"
            - name: RELEASE_NAMESPACE
              value: "{{ .Release.Namespace }}"
            - name: KRB5CCNAME
              value: "/tmp/krb5-credentials/krb5cc_user"
            - name: PROJECT_MARIA_DB_DRIVER
              value: {{ .Values.mariadbConfigProperties.mariaDbDriver }}
            - name: PROJECT_DOMAIN_NAME
              value: {{ .Values.mariadbConfigProperties.domainName }}
            - name: PROJECT_DQHI_SCHEMA_NAME
              value: {{ .Values.dqhiMariaDbConfigProperties.schemaName }}
            - name: PROJECT_DQHI_SERVICE_NAME
              value: "{{ .Values.dqhiMariaDbConfigProperties.dqhiServiceName }}.{{ .Release.Namespace }}"
            - name: PROJECT_API_AGGREGATOR_SERVICE_NAME
              value: "{{ .Values.apiaggregator.name }}.{{ .Release.Namespace }}"
            - name: PROJECT_API_AGGREGATOR_PORT
              value: "{{ .Values.apiaggregator.port }}"
            - name: PROJECT_DQHI_PORT
              value: "{{ .Values.dqhiMariaDbConfigProperties.port }}"
            - name: PROJECT_DQHI_USER
              value: {{ .Values.dqhiMariaDbConfigProperties.username }}
            - name: PROJECT_DQHI_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{ template "dqhi.cmdb.secrets" . }}"
                  key: repl-user-password

{{- if .Values.is_kerberos_enabled }}
            - name: KRB5CCNAME
              value: "/tmp/krb5-credentials/krb5cc_user"
            - name: KEYTAB_LOCATION
              value: "/tmp/krb5-credentials/ngdb.keytab"
            - name: POD_HOSTNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: USER_PRINCIPAL
              value: "{{ .Values.krb5.os_user }}/$(POD_HOSTNAME)@{{ .Values.realm }}"
{{- end }}
          volumeMounts:
            - name: dqhi-pvc-output
              mountPath: {{ .Values.persistence.outputMountPath }}
            #- name: dqhi-pvc-conf
            #  mountPath: {{ .Values.persistence.confMountPath }}
{{- if .Values.cdlk.tls.enabled }}
            - name: cdlk-tls-secret
              mountPath: {{ .Values.cdlk.tls.cert_path }}
{{- end }}
{{- if .Values.cdlk.enabled }}
            - name: hadoop-client-properties
              mountPath: "{{ .Values.app.hadoopConfDir }}"
            - name: yarn-client-properties
              mountPath: "{{ .Values.app.yarnConfDir }}"
{{- end }}
{{- if .Values.cdlk.enabled }}
            - name: hive-client-properties
              mountPath: "{{ .Values.app.hiveConfDir }}"
{{- end }}
            - name: {{ .Values.volumegfs.name | quote }}
              mountPath: {{ .Values.volumegfs.mountpath | quote }}
{{- if .Values.is_kerberos_enabled }}
            - name: shared-data
              mountPath: {{ .Values.kerberos.sharedDataMountPath }}
            - name: krb5-config-volume
              mountPath: {{ .Values.kerberos.krb5ConfigVolumeMountPath }}
              subPath: krb5.conf
{{- end }}
{{- if .Values.is_kerberos_enabled }}
        - name: krb5-tgt-init
          image: "{{ .Values.global.registry3 }}/{{ .Values.kinit.image.name }}:{{ .Values.kinit.image.tag }}"
          imagePullPolicy: "{{ .Values.kinit.image.pullPolicy }}"
          resources:
            requests:
              cpu: {{ .Values.krb.requests.cpu | quote }}
              memory: {{ .Values.krb.requests.memory | quote }}
            limits:
              cpu: {{ .Values.krb.limits.cpu | quote }}
              memory: {{ .Values.krb.limits.memory | quote }}
          volumeMounts:
            - name: krb5-config-volume
              mountPath: {{ .Values.kerberos.krb5ConfigVolumeMountPath }}
              subPath: krb5.conf
            - name: shared-data
              mountPath: {{ .Values.kerberos.sharedDataMountPath }}
          env:
            - name: KRB_NAMESPACE
              value: {{ .Release.Namespace }}            
            - name: KRB5_OS_USER
              value: "{{ .Values.krb5.os_user }}"
            - name: KRB5_CRON_EXPRESSION
              value: "{{ .Values.kinit.cron.expression }}"
            - name: KRB_COMPONENT
              value: {{ template "dqhi.fullname" . }}
            - name: KRB5_SECRET_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-username
            - name: KRB5_SECRET_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: acp-cdlk-access-cdlk-access-secrets
                  key: kdc-http-passwd
{{- end }}              
      volumes:
      - name: dqhi-pvc-output
        persistentVolumeClaim:
          claimName: {{ template "dqhi.fullname" . }}-pvc
      #- name: dqhi-pvc-conf
      #  persistentVolumeClaim:
      #    claimName: {{ template "dqhi.fullname" . }}-pvc
{{- if .Values.cdlk.enabled }}
      - name: hadoop-client-properties
        configMap:
          name: {{ .Values.app.hiveConfigMap }}
      - name: yarn-client-properties
        configMap:
          name: {{ .Values.app.hiveConfigMapAccess }}
{{- end }}
{{- if .Values.cdlk.enabled }}
      - name: hive-client-properties
        configMap:
          name: {{ .Values.app.hiveConfigMap }}
{{- end }}
      - name: apaas-cdlk-access
        configMap:
          name: {{ .Values.app.hiveConfigMapAccess }}
      - name: ca4ci-ext-endpoints
        configMap:
          name: {{ .Values.app.configMap.extEndpoints.name }}
      - name: {{ .Values.volumegfs.name | quote }}
        glusterfs:
          endpoints: {{ .Values.glusterfs.endpoints | quote }}
          path: {{ .Values.glusterfs.path | quote }}
      - name: vault-token
        secret:
          secretName: {{ .Values.app.secret.vault.name }}
          items:
           - key: PROJECT_VAULT_TOKEN
             path: vault.token
{{- if .Values.is_kerberos_enabled }}
      - name: krb5-config-volume
        configMap:
          defaultMode: 420
          name: {{ .Values.krb5.configmap }}
      - name: shared-data
        emptyDir: {}
{{- end }}
{{- if .Values.cdlk.tls.enabled }}
      - name: cdlk-tls-secret
        secret:
          defaultMode: 420
          items:
          - key: jssecacerts
            path: jssecacerts
          secretName: {{ .Values.cdlk.tls.secret_name }}
{{- end }}
{{- if .Values.securityContext.enabled }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
        allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
{{- end }}
